}
}
r22 <- matrixPower(B) %*% r
r22 <- matrixPower(B,2) %*% r
r2
r22
k <- 30
rk <- matrixPower(B,k) %*% r
rk
k <- 60
rk <- matrixPower(B,k) %*% r
rk
k <- 600
rk <- matrixPower(B,k) %*% r
rk
k <- 100
rk <- matrixPower(B,k) %*% r
rk
k <- 10
rk <- matrixPower(B,k) %*% r
rk
matrixPower(B,600)
B%*%B

v


%*%B%*%B%*%B%*%B%*%B%*%B%*%B%*%B%*%B%*%B
B%*%B%*%B%*%B%*%B
matrixPower(B,5)
matrixPower(B,4)
matrixPower(B,6)
matrixPower(B,2) == B %*% B
matrixPower(B,5) == B %*% B %*% B %*% B %*% B
matrixPower(B,3) == B %*% B %*% B
B %*% B
(B %*% B) %*% B == matrixPower(B,3)
B
B %*% B
B %*% B %*% B
B %*% B %*% B == (B%*%B)%*%B
B %*% B %*% B == matrixPower(B,3)
B %*% B == matrixPower(B,2)
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
B %*% B %*% B == matrixPower(B,3)
matrixPower(B,3
asd
fa
B %*% B %*% B == matrixPower(B,3,B)
B %*% B %*% B %*% B %*% B == matrixPower(B,5,B)
k <- 10
rk <- matrixPower(B,k,B) %*% r
rk
r
k <- 100
rk <- matrixPower(B,k,B) %*% r
rk
k <- 6000
rk <- matrixPower(B,k,B) %*% r
k <- 100
rk <- matrixPower(B,k,B) %*% r
rk
k <- 50
rk <- matrixPower(B,k,B) %*% r
rk
eigen(B)
rk
eigen(B)
eigen(B).values
eigen(B)$values
eigen(B)$values[1]
eigen(B)$vectors[1]
eigen(B)$vectors
rk
eigen(B)$vectors
A <- matrix(c(0, 1/2, 1/2, 0, 0,  0,
0, 0, 1, 0, 0, 0,
1/4, 1/4, 0, 0, 1/4, 1/4,
0, 0, 0, 0, 1/2, 1/2,
0, 0, 0, 1/2, 0, 1/2,
0, 0, 1/2, 1/2, 0, 0), nrow=6)
# Introduce decay d = 0.85
d <- 0.85
B <- 0.85*A + (0.15/6)
sum(B[,1])
sum(B[,2])
sum(B[,3])
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
k <- 50
rk <- matrixPower(B,k,B) %*% r
rk
k <- 50
rk <- matrixPower(B,k,B) %*% r
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6),nrow=6)
k <- 50
rk <- matrixPower(B,k,B) %*% r
rk
eigen(B)$values[1]
eigen(B)$vectors
eigen(B)$vectors[1]
eigen(B)$vectors[[1]]
eigen(B)$vectors[,1]
B %*% r
install.packages('graph')
install.packages('igraph')
library(igraph)
page.rank(A)
?page.rank
?graph
graph(A)
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David", "David", "Esmeralda"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob", "Alice"),
weight=c(4,5,5,2,1,1))
relations
relations <- data.frame(from=c(1,1,2,3,3,3,4,4,5,5,6),
to = c(2,3,3,1,2,5,6,5,6,4,6,4),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1))
relations <- data.frame(from=c(1,1,2,3,3,3,3,4,4,5,5,6),
to = c(2,3,3,1,2,5,6,5,6,4,6,4),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1))
g <- graph.data.frame(relations, directed=TRUE)
plot(g, edge.width=E(g)$weight)
page.rank(g)
rk
?page.rank
page.rank(g)
page.rank(g, damping=0.85)
rk
eigen(B)$values[1]
eigen(B)$vectors[,1]
eigen(B)
eigen(A)
eigen(A) == eigen(B)
eigen(A)$values == eigen(B)$values
eigen(A)
A <- c(0,1/2,1/2,0,0,0,0,0,
0,0,0,1,0,0,0,0,
0,1/2,0,0,1/2,0,0,0,
0,1/3,0,0,1/3,1/3,0,0,
0,0,0,0,0,1/3,1/3,1/3,
0,0,0,0,0,0,0,1,
1/3,0,0,0,1/3,0,0,1/3,
0,0,0,0,0,1/2,1/2,0),nrow=8)
c(0,1/2,1/2,0,0,0,0,0,
0,0,0,1,0,0,0,0,
0,1/2,0,0,1/2,0,0,0,
0,1/3,0,0,1/3,1/3,0,0,
0,0,0,0,0,1/3,1/3,1/3,
0,0,0,0,0,0,0,1,
1/3,0,0,0,1/3,0,0,1/3,
0,0,0,0,0,1/2,1/2,0)
A <- c(0,1/2,1/2,0,0,0,0,0,
0,0,0,1,0,0,0,0,
0,1/2,0,0,1/2,0,0,0,
0,1/3,0,0,1/3,1/3,0,0,
0,0,0,0,0,1/3,1/3,1/3,
0,0,0,0,0,0,0,1,
1/3,0,0,0,1/3,0,0,1/3,
0,0,0,0,0,1/2,1/2,0),nrow=8)
c(0, 1/2, 1/2, 0,0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0)
c(0, 1/2, 1/2, 0,0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0),nrow=8)
c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0)
c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0),nrow=8)
A <- matrix(c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2. 1/2, 0), nrow=8)
A <- matrix(c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0),nrow=8))
matrix(c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0),nrow=8))
A <- matrix(c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0),nrow=8)
A
matrix(c(1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8), nrow=8)
matrixPower(A, 50, A) %*%
matrix(c(1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8), nrow=8)
matrixPower(A, 500, A) %*%
matrix(c(1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8), nrow=8)
eigen(A)
relations <- data.frame(from =   c(1,1,2,3,3,4,4,4,5,5,5,6,7,7,7,8,8),
to =     c(2,3,4,2,5,2,5,6,6,7,8,8,1,5,8,7,6),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
g <- graph.data.frame(relations, directed=TRUE)
page.rank(g)
plot(g)
eigten(A)
eigen(A)
page.rank(g, damper=1)
page.rank(g, damp=1)
page.rank(g, damp=0)
A <- matrix(c(0, 1/2, 1/2, 0, 0,  0,
0, 0, 1, 0, 0, 0,
1/4, 1/4, 0, 0, 1/4, 1/4,
0, 0, 0, 0, 1/2, 1/2,
0, 0, 0, 1/2, 0, 1/2,
0, 0, 1/2, 1/2, 0, 0), nrow=6)
# Introduce decay d = 0.85
d <- 0.85
B <- 0.85*A + (0.15/6)
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6),nrow=6)
k <- 50
rk <- matrixPower(B,k,B) %*% r
rk
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6),nrow=6)
k <- 5000
rk <- matrixPower(B,k,B) %*% r
rk
A %*% r
eigen(B)$values[1]
eigen(B)$vectors[,1]
rk
page.rank(g)
relations <- data.frame(from=c(1,1,2,3,3,3,3,4,4,5,5,6),
to = c(2,3,3,1,2,5,6,5,6,4,6,4),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1))
g <- graph.data.frame(relations, directed=TRUE)
page.rank(g)
eigen(B)
A <- matrix(c(0, 1/2, 1/2, 0, 0,  0,
0, 0, 1, 0, 0, 0,
1/4, 1/4, 0, 0, 1/4, 1/4,
0, 0, 0, 0, 1/2, 1/2,
0, 0, 0, 1/2, 0, 1/2,
0, 0, 1/2, 1/2, 0, 0), nrow=6)
# Introduce decay d = 0.85
d <- 0.85
B <- 0.85*A + (0.15/6)
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6),nrow=6)
k <- 5000
rk <- matrixPower(B,k,B) %*% r
k <- 500
rk <- matrixPower(B,k,B) %*% r
rk
eigen(B)$values[1]
eigen(B)$vectors[,1]
eigen(B)$vectors[1,1]
rk[1] / eigen(B)$vectors[1,1]
(rk[1] / eigen(B)$vectors[,1]) * eigen(B)$vectors[,1]
rk
eigen(B)$vectors[,1]
(rk / eigen(B)$vectors[,1]) * eigen(B)$vectors[,1]
rk
eigen(B)$values[1]
rk / eigen(B)$vectors[,1]
library(igraph)
relations <- data.frame(from=c(1,1,2,3,3,3,3,4,4,5,5,6),
to = c(2,3,3,1,2,5,6,5,6,4,6,4),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1))
g <- graph.data.frame(relations, directed=TRUE)
eigen(B)
page.rank(g)
page.rank(g)$vector
(rk / page.rank(g)$vector) * page.rank(g)$vector
page.rank(g)
plot(g)
geom_smooth(method='lm', formula = mpg ~ poly(displacement, 2),
data=select(autodata, displacement, mpg))
library(stats)
library(boot)
library(dplyr)
library(ggplot2)
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 605 Fundamentals of Computational Mathematics/Assignment 12")
autodata <- scan("auto-mpg.data")
autodata <- t(matrix(autodata, nrow = 5))
autodata <- data.frame(displacement = autodata[,1],
horsepower = autodata[,2],
weight = autodata[,3],
acceleration = autodata[,4],
mpg = autodata[,5])
glm.fit=glm(mpg~poly(displacement+horsepower+
weight+acceleration,2), data=autodata)
cv.err5[2]=cv.glm(auto,glm.fit,K=5)$delta[1]
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point() +
geom_smooth(method='lm', formula = mpg ~ poly(displacement, 2),
data=select(autodata, displacement, mpg))
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point() +
geom_smooth(method='lm', formula = mpg ~ poly(displacement, 2, data=autodata),
data=select(autodata, displacement, mpg))
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point() +
geom_smooth(method='lm', formula = mpg ~ poly(autodata$displacement, 2),
data=select(autodata, displacement, mpg))
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point() +
geom_smooth(method='lm', formula = autodata$mpg ~ poly(autodata$displacement, 2),
data=select(autodata, displacement, mpg))
displacement <- autodata$displacement
mpg <- autodata$mpg
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point() +
geom_smooth(method='lm', formula = mpg ~ poly(displacement, 2),
data=select(autodata, displacement, mpg))
geom_smooth(method='lm', formula = mpg ~ poly(displacement, 2),
a
asdf
asd
f
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point()
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point() +
geom_smooth(method='lm')
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point() +
geom_smooth(method='lm', formula = y ~ poly(x, 2))
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point() +
geom_smooth(method='lm', formula = y ~ poly(x, 3))
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point() +
geom_smooth(method='lm', formula = y ~ poly(x, 4))
ggplot(select(autodata, displacement, mpg), aes(x=displacement, y=mpg)) +
geom_point() +
geom_smooth(method='lm', formula = y ~ poly(x, 5))
for(i in 1:8){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
cv.err5 <- c()
for(i in 1:8){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
plot(cv.err5)
?glm
?cv.glm
cv.err5 <- c()
for(i in 1:20){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
plot(cv.err5)
cv.err5 <- c()
for(i in 1:15){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
plot(cv.err5)
?cv.glm
glm.fit=glm(mpg~poly(displacement+horsepower+
weight+acceleration,2), data=autodata)
cv.glm(autodata, glm.fit, k=5)
cv.glm(autodata, glm.fit, K=5)
cv.err5 <- c()
for(i in 1:15){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
degree <- 1:8
plot(degree,cv.err5,type=’b’)
plot(degree,cv.err5,type='b')
degree <- 1:8
cv.err5 <- c()
for(i in 1:8){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
plot(degree,cv.err5,type='b')
n <- 8
degree <- 1:n
cv.err5 <- c()
for(i in 1:n){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
n <- 20
degree <- 1:n
cv.err5 <- c()
for(i in 1:n){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
plot(degree,cv.err5,type='b')
n <- 13
degree <- 1:n
cv.err5 <- c()
for(i in 1:n){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
plot(degree,cv.err5,type='b')
n <- 14
degree <- 1:n
cv.err5 <- c()
for(i in 1:n){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
```
n <- 14
degree <- 1:n
cv.err5 <- c()
for(i in 1:n){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
plot(degree,cv.err5,type='b')
n <- 17
degree <- 1:n
cv.err5 <- c()
for(i in 1:n){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
plot(degree,cv.err5,type='b')
n <- 17
degree <- 1:n
cv.err5 <- c()
for(i in 1:n){
glm.fit <- glm(mpg~poly(displacement+horsepower+
weight+acceleration,i), data=autodata)
cv.err5 <- c(cv.err5, cv.glm(autodata, glm.fit, K=5)$delta[1])
}
plot(degree,cv.err5,type='b')
