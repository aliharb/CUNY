library(devtools)
library(installr)
remove.packages("Rcpp")
install.packages("C:/Users/Charley/Downloads/Rcpp_0.11.3.tar.gz", repos=NULL, type="source")
devtools::find_rtools()
Sys.getenv("PATH")
system('g++ -v')
system('where make')
devtools::install_github("hadley/bigvis")
library(bigvis)
A <- matrix(c(1,-1,2,0,3,4),nrow=2)
A
T(A)
t(A)
A %*% t(A)
A
A
A %*% t(A)
A <- matrix(c(1,-1,2,0,3,4),nrow=2)
A
A %*% t(A)
X <- A %*% t(A)
Y <- t(A) %*% A
Y
library(pracma)
?rref
rref(X)
rref(Y)
Y
eigen(X)
eigen(Y)
getSymbols('CPIAUCNS',src='FRED')
library(quantmod)
getSymbols('CPIAUCNS',src='FRED')
View(CPIAUCNS)
svd(A)
a <- 1
b <- -10
c <- 16
sqrt(4)
(-b + sqrt(b^2 - 4*a*c))/(2*a)
eigen(matrix(c(5,3,3,5(,nrow=2))))
eigen(matrix(c(5,3,3,5(,nrow=2))))
matrix(c(5,3,3,5(,nrow=2)))
eigen(matrix(c(5,3,3,5),nrow=2))
(-b + sqrt(b^2 - 4*a*c))/(2*a)
(-b - sqrt(b^2 - 4*a*c))/(2*a)
A <- matrix(c(1,-1,2,0,3,4),nrow=2)
A
AtA <- t(A) %*% A
A <- matrix(c(1,-1,2,0,3,4),nrow=2)
A
svd(A)
svd(A)$d
svd(A)$d[1]
svd(A)
svd(A)$v
eigen(Y)
Y <- t(A) %*% A
X <- A %*% t(A)
eigen(Y)
svd(A)$v
eigen(Y)$vectors
rank(eigen(Y)$vectors)
?rank
qr(Y)$rank
library(pracma)
rref(Y)
svd(A)$u
eigen(X)
ssvd <- svd(A)
svd(A)
matrix(c(svd(d)[1],0,0,svd(d)[2],0,0),nrow=2)
ssvd <- matrix(c(svd(A)$d[1],0,0,svd(A)$d[2],0,0),nrow=2)
ssvd
eigen(X)
eigen(X)$values
sqrt(eigen(X)$values)
svd(A)$d
ssueig <- matrix(c(sqrt(eigen(X)$values[1]),0,0,sqrt(eigen(X)$values[2]),0,0),nrow=2)
eigen(Y)$values
eigen(X)$values
usvd == ueig
usvd <- svd(A)$u
ueig <- eigen(X)$vectors
usvd == ueig
usvd
ueig
usvd
vsvd == veig
vsvd <- svd(A)$v
veig <- eigen(Y)$vectors
vsvd == veig
vsvd
veig
veig <- eigen(Y)$vectors[1:2]
veig
veig <- eigen(Y)$vectors
eigen(Y)$vectors
veig <- eigen(Y)$vectors[:,1:2]
eigen(Y)$vectors[:,1:2]
eigen(Y)$vectors[,1:2]
<
veig <- eigen(Y)$vectors[,1:2]
vsvd == veig
vsvd
veig
ssvd <- matrix(c(svd(A)$d[1],0,0,svd(A)$d[2],0,0),nrow=2)
ssueig <- matrix(c(sqrt(eigen(X)$values[1]),0,0,sqrt(eigen(X)$values[2]),0,0),nrow=2)
ssveig <- matrix(c(sqrt(eigen(Y)$values[1]),0,0,sqrt(eigen(Y)$values[2]),0,0),nrow=2)
ssvd
ssueig
ssveig
usvd %*% ssvd %*% vsvd
usvd %*% ssvd %*% t(vsvd)
vsvd
t(vsvd)
usvd
usvd %*% ssvd
t(vsvd)
usvd %*% ssvd %*% t(vsvd)
matrix(c(svd(A)$d[1],0,0,svd(A)$d[2],0,0),nrow=2)
usvd %*% ssvd %*% vsvd
ueig %*% ssueig %*% t(veig)
svd(A)
usvd
ssvd
vsvd
ueig
ssueig <- matrix(c(sqrt(eigen(X)$values[1]),0,0,0,sqrt(eigen(X)$values[2]),0),nrow=3)
ssveig <- matrix(c(sqrt(eigen(Y)$values[1]),0,0,0,sqrt(eigen(Y)$values[2]),0),nrow=3)
ueig %*% ssueig %*% t(veig)
usvd
ssvd
t(vsvd)
eigen(Y)$vectors
svd(A)$v
vsvd <- cbind(svd(A)$v,c(0,0,0))
vsvd
ueig %*% ssueig %*% t(veig)
usvd %*% ssvd %*% t(vsvd)
veig <- cbind(eigen(Y)$vectors[,1:2],c(0,0,0))
usvd %*% ssvd %*% t(vsvd)
ueig %*% ssueig %*% t(veig)
veig <- cbind(eigen(Y)$vectors[,1:2],c(0,0,0))
t(veig)
ssueig
ueig %*% ssueig
ssueig <- matrix(c(sqrt(eigen(X)$values[1]),0,0,sqrt(eigen(X)$values[2]),0,0),nrow=2)
ueig %*% ssueig %*% t(veig)
M <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3)
M
i <- 2
j <- 2
rownames(M)
M[2,]
M[-2,]
M[-i,-j]
(-1^(i+j)) * det(M[-i,-j])
a <- c(1,2,3)
b <- c(4,5,6)
c <- c(7,8,9)
matrix(a,b,c)
rbind(a,b,c)
M <- matrix()
M[1,1] <- 1
M[1,2] <- 2
M <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3)
nrow(M)
C <- matrix(nrow=nrow(M), ncol=ncol(M))
cofactorize <- function(M, i, j){
return((-1^(i+j)) * det(M[-i,-j]))
}
1:5
i <- 1:nrow(M)
j <- 1:ncol(M)
C[i,j] <- cofactorize(M,i,j)
C
det(M)
cofactorize(M,i,j)
i <- 1:nrow(M)
j <- 1:ncol(M)
cofactorize(M,i,j)
cofactorize(M,i,j)
columnize <- function(M, j){
return(cofactorize(M, 1:nrow(M),j))
}
library(mmply)
library(plyr)
?mmply
?plyr
cofactorize(M,1:nrow(m),1)
cofactorize(M,1:nrow(M),1)
M
cofactorize(M,1,1)
cofactorize(M,1:3,1)
i <- 1:3
cofactorize(M,i,1)
?aaply
i <- rep(1:3,3)
i
j <- c(rep(1,3),rep(2,3),rep(3,3))
C <- matrix(nrow=nrow(M), ncol=ncol(M))
cofactorize(M,i,j)
matrix(cofactorize(M,i,j),nrow=nrow(M))
?apply
C <- apply(M, cofactorize, M)
M
apply(M, FUN=cofactorize, M=M)
P <- M
apply(P, FUN=cofactorize, M=P)
?outer
?mapply
?apply
?apply
?outer
outer(1:3, 1:3)
M
-1*0
-1 * 0
theMatrix <- matrix(1:9, nrow=3)
apply(theMatrix, 1, sum)
?aaply
sum(M)
sumexept <- function(M, i, j){
return(sum(M) - M[i,j])
}
M
M
M[1,3]
row(M[1,3])
M[1,3]
M
?matrix
?Position
Position(M[1,3])
?which?
??
asd
fas
df
asd
?which
which(M==9)
which(M==4)
M
M[2,2] = 10
M
which(M==10)
M[5]
len(M)
length(M)
which(M==M[3,3])
m[2,2]=9
M[2,2]=9
M
which(M=9)
which(m==9)
which(M==9)
1:4
aaply(1:4,rep,4)
?aaply
aaply(.data=1:4, .fun=rep, 4)
aaply(.data=1:4, 1, .fun=rep, 4)
M
row(M)
rowM <- row(M)
colM <- col(M)
row(M[1,2])
M[row(M),col(M)]
C <- matrix(nrow=nrow(M), ncol=ncol(M))
C[1:nrow(C),1:ncol(C)]
cofactorize(M, row(M), col(M))
cofactorize(M, 1, 3)
det(M)
M
sumexept <- function(M, i, j){
return(sum(M) - M[i,j])
}
M
sumexept <- function(M, i, j){
return(sum(M) - M[i,j])
}
sumexept(M, 1, 3)
sumexept(M, 1, 1)
sumexept(M, 1, 2)
sumexept(M, 1, 3)
sumexept(M, row(M), col(M))
sumexept(M, 1:3, 1:3)
cofactorize(M, 1:3, 1:3)
M
M[-1,-1]
det(M[-1,-1])
(-1^2) * det(M[-1,-1])
-1^2
(3^3) * det(M[-1,-1])
3^3
cofactorize <- function(M, i, j){
return(((-1)^(i+j)) * det(M[-i,-j]))
}
cofactorize(M, 1:3, 1:3)
3:1
aaply(M, 1, .fun(cofactorize), row(M), col(M))
aaply(M, 1, .fun=cofactorize, row(M), col(M))
aaply(M, 1, .fun=cofactorize, M, row(M), col(M))
row(M)
?outer
outer(1:3, 1:3, FUN=cofactorize, M)
outer(1:3, 1:3, FUN=cofactorize, M, row(M), col(M))
outer(1:3, 1:3, FUN="sum")
sum(1:3)
outer(1:3, 1:3)
outer(1:3, 1:3, FUN=sum)
outer(1:3, 1:3, FUN="sum")
outer(1:3, 1:3, FUN="+")
?match.fun
type(1:3)
typeof(1:3)
C <- matrix(nrow=nrow(M), ncol=ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[i,j] <- cofactorize(M, i, j)
}
}
C
?vectorize
?sapply
aaply(M, FUN=cofactorize, M, 1:3, 1:3)
aaply(M, c(1,2), FUN=cofactorize, M, 1:3, 1:3)
aaply(M, c(1,2), .fun=cofactorize, M, 1:3, 1:3)
aaply(M, c(1,2), .fun=cofactorize, M, 1:3, 1:3)
MInv <- C/det(M)
MInv
solve(M)
M <- matrix(c(1,2,3,4,9,6,7,8,9),nrow=3)
cofactorize <- function(M, i, j){
return(((-1)^(i+j)) * det(M[-i,-j]))
}
C <- matrix(nrow=nrow(M), ncol=ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[i,j] <- cofactorize(M, i, j)
}
}
MInv <- C/det(M)
MInv == solve(M)
MInv
solve(M)
MInv <- t(C)/det(M)
MInv
solve(M)
MInv == solve(M)
myinverse <- function(M){
C <- matrix(nrow=nrow(M), ncol=ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[i,j] <- cofactorize(M, i, j)
}
}
return(t(C)/det(M))
}
M <- matrix(c(1,2,3,4,9,6,7,8,9),nrow=3)
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
A
AtA <- t(A) %*% A
b <- matrix(c(0,8,8,19), nrow=4)
b
Atb <- t(A) %*% b
b <- matrix(c(0,8,8,20), nrow=4)
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
b <- matrix(c(0,8,8,20), nrow=4)
AtA <- t(A) %*% A
Atb <- t(A) %*% b
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
b <- matrix(c(0,8,8,20), nrow=4)
AtA <- t(A) %*% A
Atb <- t(A) %*% b
solve(AtA) %*% Atb
library(pracma)
rref(AtA)
Atb <- t(A) %*% b
Atb
cbind(AtA,Atb)
rref(cbind(AtA,Atb))
solve(AtA) %*% Atb
xhat <- solve(AtA) %*% Atb
e <- A %*% xhat - b
e
A %*% xhat - b
(A %*% xhat) - b
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
b <- matrix(c(0,8,8,19), nrow=4)
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
b <- matrix(c(0,8,8,19), nrow=4)
AtA <- t(A) %*% A
Atb <- t(A) %*% b
AtA
Atb
xhat <- solve(AtA) %*% Atb
xhat
e <- (A %*% xhat) - b
e
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
b <- matrix(c(0,8,8,20), nrow=4)
AtA <- t(A) %*% A
Atb <- t(A) %*% b
xhat <- solve(AtA) %*% Atb
e <- (A %*% xhat) - b
e
p <- matrix(c(1,5,13,17),nrow=4)
rref(cbind(A,p))
solve(A) %*% p
solve(A)
A
rref(cbind(A,b))
cbind(A,b)
rref(cbind(A,b))
rref(cbind(A,p))
rref(cbind(A,p))
rref(cbind(A,p))
((A %*% xhat) - b) * ((A %*% xhat) - b)
c(1,2,3,4) * c(1,2,3,4)
c(1,2,3,4) %*% c(1,2,3,4)
((A %*% xhat) - b) %*% ((A %*% xhat) - b)
((A %*% xhat) - b)
((A %*% xhat) - b)
((A %*% xhat) - b) %*% t((A %*% xhat) - b)
t((A %*% xhat) - b) %*% ((A %*% xhat) - b)
esquared <- t((A %*% xhat) - b) %*% ((A %*% xhat) - b)
esquared
p <- matrix(c(1,5,13,17),nrow=4)
rref(cbind(A,p))
e <- b - p
e <- b - p
t(e) %*% p
A
t(e) %*% A[,1]
t(e) %*% A[,2]
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 605 Fundamentals of
Computational Mathematics/Assignment 5")
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 605 Fundamentals of Computational Mathematics/Assignment 5")
autodata <- read.csv("auto-mpg.data")
View(autodata)
?read.csv
autodata <- read.csv("auto-mpg.data", header = FALSE)
View(autodata)
autodata <- read.delim("auto-mpg.data", header = FALSE, sep="\t")
?scan
autodata <- scan("auto-mpg.data")
autodata <- matrix(autodata, ncols = 5)
autodata <- matrix(autodata, ncol = 5)
autodata
autodata <- scan("auto-mpg.data")
autodata <- matrix(autodata, nrow = 5)
autodata <- scan("auto-mpg.data")
autodata <- t(matrix(autodata, nrow = 5))
autodata
Adata <- autodata[:,1:4]
Adata <- autodata[,1:4]
Adata
bdata <- autodata[,5]
AtAdata <- t(Adata) %*% Adata
Atb <- t(Adata) %*% bdata
xhat <- solve(AtAdata) %*% Atbdata
Atbdata <- t(Adata) %*% bdata
xhat <- solve(AtAdata) %*% Atbdata
solve(AtAdata)
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 605 Fundamentals of Computational Mathematics/Assignment 5")
autodata <- read.delim("auto-mpg.data", header = FALSE, sep="\t")
autodata <- scan("auto-mpg.data")
autodata <- t(matrix(autodata, nrow = 5))
Adata <- autodata[,1:4]
bdata <- autodata[,5]
Adata
bdata
AtAdata <- t(Adata) %*% Adata
Atbdata <- t(Adata) %*% bdata
xhatdata <- solve(AtAdata) %*% Atbdata
solve(AtAdata)
Atbdata
?lm
?lm(autodata[,5] ~ autodata[,1:4])
lm(autodata[,5] ~ autodata[,1:4])
solve(AtAdata) %*% Atbdata
?ein
autodata
?lm
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 605 Fundamentals of Computational Mathematics/Assignment 5")
autodata <- read.delim("auto-mpg.data", header = FALSE, sep="\t")
autodata <- scan("auto-mpg.data")
autodata <- t(matrix(autodata, nrow = 5))
autodata
Adata <- autodata[,1:4]
bdata <- autodata[,5]
AtAdata <- t(Adata) %*% Adata
Atbdata <- t(Adata) %*% bdata
xhatdata <- solve(AtAdata) %*% Atbdata
lm(autodata[,5] ~ 0 + autodata[,1:4])
xhatdata
AdataInt <- cbind(1,autodata[,1:4])
AdataInt
bdataInt <- autodata[,5]
AtAdataInt <- t(AdataInt) %*% AdataInt
AtbdataInt <- t(AdataInt) %*% bdataInt
xhatdataInt <- solve(AtAdataInt) %*% AtbdataInt
xhatdataInt
lm(autodata[,5] ~ autodata[,1:4])
xhatdata
AtAdata
Atbdata
xhatdataInt
lm(autodata[,5] ~ autodata[,1:4])
