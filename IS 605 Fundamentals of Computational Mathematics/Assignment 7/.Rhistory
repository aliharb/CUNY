<
veig <- eigen(Y)$vectors[,1:2]
vsvd == veig
vsvd
veig
ssvd <- matrix(c(svd(A)$d[1],0,0,svd(A)$d[2],0,0),nrow=2)
ssueig <- matrix(c(sqrt(eigen(X)$values[1]),0,0,sqrt(eigen(X)$values[2]),0,0),nrow=2)
ssveig <- matrix(c(sqrt(eigen(Y)$values[1]),0,0,sqrt(eigen(Y)$values[2]),0,0),nrow=2)
ssvd
ssueig
ssveig
usvd %*% ssvd %*% vsvd
usvd %*% ssvd %*% t(vsvd)
vsvd
t(vsvd)
usvd
usvd %*% ssvd
t(vsvd)
usvd %*% ssvd %*% t(vsvd)
matrix(c(svd(A)$d[1],0,0,svd(A)$d[2],0,0),nrow=2)
usvd %*% ssvd %*% vsvd
ueig %*% ssueig %*% t(veig)
svd(A)
usvd
ssvd
vsvd
ueig
ssueig <- matrix(c(sqrt(eigen(X)$values[1]),0,0,0,sqrt(eigen(X)$values[2]),0),nrow=3)
ssveig <- matrix(c(sqrt(eigen(Y)$values[1]),0,0,0,sqrt(eigen(Y)$values[2]),0),nrow=3)
ueig %*% ssueig %*% t(veig)
usvd
ssvd
t(vsvd)
eigen(Y)$vectors
svd(A)$v
vsvd <- cbind(svd(A)$v,c(0,0,0))
vsvd
ueig %*% ssueig %*% t(veig)
usvd %*% ssvd %*% t(vsvd)
veig <- cbind(eigen(Y)$vectors[,1:2],c(0,0,0))
usvd %*% ssvd %*% t(vsvd)
ueig %*% ssueig %*% t(veig)
veig <- cbind(eigen(Y)$vectors[,1:2],c(0,0,0))
t(veig)
ssueig
ueig %*% ssueig
ssueig <- matrix(c(sqrt(eigen(X)$values[1]),0,0,sqrt(eigen(X)$values[2]),0,0),nrow=2)
ueig %*% ssueig %*% t(veig)
M <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3)
M
i <- 2
j <- 2
rownames(M)
M[2,]
M[-2,]
M[-i,-j]
(-1^(i+j)) * det(M[-i,-j])
a <- c(1,2,3)
b <- c(4,5,6)
c <- c(7,8,9)
matrix(a,b,c)
rbind(a,b,c)
M <- matrix()
M[1,1] <- 1
M[1,2] <- 2
M <- matrix(c(1,2,3,4,5,6,7,8,9),nrow=3)
nrow(M)
C <- matrix(nrow=nrow(M), ncol=ncol(M))
cofactorize <- function(M, i, j){
return((-1^(i+j)) * det(M[-i,-j]))
}
1:5
i <- 1:nrow(M)
j <- 1:ncol(M)
C[i,j] <- cofactorize(M,i,j)
C
det(M)
cofactorize(M,i,j)
i <- 1:nrow(M)
j <- 1:ncol(M)
cofactorize(M,i,j)
cofactorize(M,i,j)
columnize <- function(M, j){
return(cofactorize(M, 1:nrow(M),j))
}
library(mmply)
library(plyr)
?mmply
?plyr
cofactorize(M,1:nrow(m),1)
cofactorize(M,1:nrow(M),1)
M
cofactorize(M,1,1)
cofactorize(M,1:3,1)
i <- 1:3
cofactorize(M,i,1)
?aaply
i <- rep(1:3,3)
i
j <- c(rep(1,3),rep(2,3),rep(3,3))
C <- matrix(nrow=nrow(M), ncol=ncol(M))
cofactorize(M,i,j)
matrix(cofactorize(M,i,j),nrow=nrow(M))
?apply
C <- apply(M, cofactorize, M)
M
apply(M, FUN=cofactorize, M=M)
P <- M
apply(P, FUN=cofactorize, M=P)
?outer
?mapply
?apply
?apply
?outer
outer(1:3, 1:3)
M
-1*0
-1 * 0
theMatrix <- matrix(1:9, nrow=3)
apply(theMatrix, 1, sum)
?aaply
sum(M)
sumexept <- function(M, i, j){
return(sum(M) - M[i,j])
}
M
M
M[1,3]
row(M[1,3])
M[1,3]
M
?matrix
?Position
Position(M[1,3])
?which?
??
asd
fas
df
asd
?which
which(M==9)
which(M==4)
M
M[2,2] = 10
M
which(M==10)
M[5]
len(M)
length(M)
which(M==M[3,3])
m[2,2]=9
M[2,2]=9
M
which(M=9)
which(m==9)
which(M==9)
1:4
aaply(1:4,rep,4)
?aaply
aaply(.data=1:4, .fun=rep, 4)
aaply(.data=1:4, 1, .fun=rep, 4)
M
row(M)
rowM <- row(M)
colM <- col(M)
row(M[1,2])
M[row(M),col(M)]
C <- matrix(nrow=nrow(M), ncol=ncol(M))
C[1:nrow(C),1:ncol(C)]
cofactorize(M, row(M), col(M))
cofactorize(M, 1, 3)
det(M)
M
sumexept <- function(M, i, j){
return(sum(M) - M[i,j])
}
M
sumexept <- function(M, i, j){
return(sum(M) - M[i,j])
}
sumexept(M, 1, 3)
sumexept(M, 1, 1)
sumexept(M, 1, 2)
sumexept(M, 1, 3)
sumexept(M, row(M), col(M))
sumexept(M, 1:3, 1:3)
cofactorize(M, 1:3, 1:3)
M
M[-1,-1]
det(M[-1,-1])
(-1^2) * det(M[-1,-1])
-1^2
(3^3) * det(M[-1,-1])
3^3
cofactorize <- function(M, i, j){
return(((-1)^(i+j)) * det(M[-i,-j]))
}
cofactorize(M, 1:3, 1:3)
3:1
aaply(M, 1, .fun(cofactorize), row(M), col(M))
aaply(M, 1, .fun=cofactorize, row(M), col(M))
aaply(M, 1, .fun=cofactorize, M, row(M), col(M))
row(M)
?outer
outer(1:3, 1:3, FUN=cofactorize, M)
outer(1:3, 1:3, FUN=cofactorize, M, row(M), col(M))
outer(1:3, 1:3, FUN="sum")
sum(1:3)
outer(1:3, 1:3)
outer(1:3, 1:3, FUN=sum)
outer(1:3, 1:3, FUN="sum")
outer(1:3, 1:3, FUN="+")
?match.fun
type(1:3)
typeof(1:3)
C <- matrix(nrow=nrow(M), ncol=ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[i,j] <- cofactorize(M, i, j)
}
}
C
?vectorize
?sapply
aaply(M, FUN=cofactorize, M, 1:3, 1:3)
aaply(M, c(1,2), FUN=cofactorize, M, 1:3, 1:3)
aaply(M, c(1,2), .fun=cofactorize, M, 1:3, 1:3)
aaply(M, c(1,2), .fun=cofactorize, M, 1:3, 1:3)
MInv <- C/det(M)
MInv
solve(M)
M <- matrix(c(1,2,3,4,9,6,7,8,9),nrow=3)
cofactorize <- function(M, i, j){
return(((-1)^(i+j)) * det(M[-i,-j]))
}
C <- matrix(nrow=nrow(M), ncol=ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[i,j] <- cofactorize(M, i, j)
}
}
MInv <- C/det(M)
MInv == solve(M)
MInv
solve(M)
MInv <- t(C)/det(M)
MInv
solve(M)
MInv == solve(M)
myinverse <- function(M){
C <- matrix(nrow=nrow(M), ncol=ncol(M))
for(i in 1:nrow(M)){
for(j in 1:ncol(M)){
C[i,j] <- cofactorize(M, i, j)
}
}
return(t(C)/det(M))
}
M <- matrix(c(1,2,3,4,9,6,7,8,9),nrow=3)
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
A
AtA <- t(A) %*% A
b <- matrix(c(0,8,8,19), nrow=4)
b
Atb <- t(A) %*% b
b <- matrix(c(0,8,8,20), nrow=4)
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
b <- matrix(c(0,8,8,20), nrow=4)
AtA <- t(A) %*% A
Atb <- t(A) %*% b
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
b <- matrix(c(0,8,8,20), nrow=4)
AtA <- t(A) %*% A
Atb <- t(A) %*% b
solve(AtA) %*% Atb
library(pracma)
rref(AtA)
Atb <- t(A) %*% b
Atb
cbind(AtA,Atb)
rref(cbind(AtA,Atb))
solve(AtA) %*% Atb
xhat <- solve(AtA) %*% Atb
e <- A %*% xhat - b
e
A %*% xhat - b
(A %*% xhat) - b
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
b <- matrix(c(0,8,8,19), nrow=4)
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
b <- matrix(c(0,8,8,19), nrow=4)
AtA <- t(A) %*% A
Atb <- t(A) %*% b
AtA
Atb
xhat <- solve(AtA) %*% Atb
xhat
e <- (A %*% xhat) - b
e
A <- matrix(c(1,1,1,1,0,1,3,4),nrow=4)
b <- matrix(c(0,8,8,20), nrow=4)
AtA <- t(A) %*% A
Atb <- t(A) %*% b
xhat <- solve(AtA) %*% Atb
e <- (A %*% xhat) - b
e
p <- matrix(c(1,5,13,17),nrow=4)
rref(cbind(A,p))
solve(A) %*% p
solve(A)
A
rref(cbind(A,b))
cbind(A,b)
rref(cbind(A,b))
rref(cbind(A,p))
rref(cbind(A,p))
rref(cbind(A,p))
((A %*% xhat) - b) * ((A %*% xhat) - b)
c(1,2,3,4) * c(1,2,3,4)
c(1,2,3,4) %*% c(1,2,3,4)
((A %*% xhat) - b) %*% ((A %*% xhat) - b)
((A %*% xhat) - b)
((A %*% xhat) - b)
((A %*% xhat) - b) %*% t((A %*% xhat) - b)
t((A %*% xhat) - b) %*% ((A %*% xhat) - b)
esquared <- t((A %*% xhat) - b) %*% ((A %*% xhat) - b)
esquared
p <- matrix(c(1,5,13,17),nrow=4)
rref(cbind(A,p))
e <- b - p
e <- b - p
t(e) %*% p
A
t(e) %*% A[,1]
t(e) %*% A[,2]
die1 <- c(rep(1,6),rep(2,6),rep(3,6),rep(4,6),rep(5,6),rep(6,6))
die2 <- rep(1:6,6)
Samplespace <- data.frame(die1 = die1, die2 = die2, sum = die1 + die2)
nrow(Samplespace[Samplespace$sum == 3,]) / nrow(Samplespace)
n <- 25
365^25
5*4*3*2
5*4
25*24
6*5
n <- 365*((25*24)/2)
d <- 365^25
n/d
d <- 365^25
n <- 365*((25*24)/2)
((25*24)/2)
((25*24)/2)
?factorial
e <- factorial(365+25-1)/(factorial(25)*factorial(365-1))
install.packages("combinat")
n/d
300 * (1/365) * 365
300 * (1/365)^2 * 365
p1 <- (1/365)^2
p1 * 365
p1 * 365 == 1/365
p2 <- p1 * 365
p2 == 1/365
300 * p1 * p2
19203801283910283 * p1 * p2
365 * p1 * p2
p1 <- (1/365)^2
p2 <- p1 * 365
1.64399790e+39/3.17289491e+38
3.17289491e+38/1.64399790e+39
sumprod(4,5,6)
cumprod(4,5,6)
cumprod(c(4,5,6))
prod(4,5,6)
5:2
365-25
length(365:340)
length(365:341)
p <- prod(365:341)/(365^25)
pdiff <- prod(365:341)/(365^25)
psame <- 1 - pdiff
365-50
pdiff <- prod(365:316)/(365^25)
pdiff <- prod(365:316)/(365^50)
psame <- 1-pdiff
expectedValue <- function(vec){
return(sum(vec)/length(vec))
}
expectedValue(c(1,2,3,4,5))
mean(c(1,2,3,4,5))
mean(c(1,2,3,4,5)) == expectedValue(c(1,2,3,4,5))
standardDeviation <- function(vec){
return(sqrt(sum((vec-expectedValue(vec))^2)/length(vec)))
}
standardDeviation(c(2,4,4,4,5,5,7,9))
stdev(c(2,4,4,4,5,5,7,9))
sd(c(2,4,4,4,5,5,7,9))
?sd
standardDeviation(c(2,4,4,4,5,5,7,9)) == sd(c(2,4,4,4,5,5,7,9))
vec <- c(2,4,4,4,5,5,7,9)
standardDeviation(vec) == sd(vec)
standardDeviation <- function(vec){
return(sqrt(sum((vec-expectedValue(vec))^2)/(length(vec)-1)))
}
sd(vec) == standardDeviation(vec)
movingStats <- function(statsList = list(), vec){
if(length(statsList) != 0){
nnew <- statsList$n + length(vec)
meannew <- (statsList$n*statsList$mean + sum(vec))/nnew
sumxold <- statsList$n*statsList$mean
sumxnew <- sumxold + sum(vec)
sumxsquarednew <- statsList$sumxsquared + sum(vec^2)
nsdsquarednew <- nnew*meannew^2 - 2*meannew*sumxnew + sumxsquarednew
sdnew <- sqrt(nsdsquarednew/nnew)
}else{
nnew <- length(vec)
meannew <- sum(vec) / nnew
sumxnew <- sum(vec)
sumxsquarednew <- sum(vec^2)
nsdsquarednew <- nnew*meannew^2 - 2*meannew*sumxnew + sumxsquarednew
sdnew <- sqrt(nsdsquarednew/nnew)
}
return(list(mean = meannew, sd = sdnew, n = nnew, sumxsquared = sumxsquarednew))
}
vec1 <- c(80,2,74,65,99,40,29,46,91)
vec2 <- c(5,7,18,93,66,59)
statsList1 <- movingStats(vec = vec1)
movingStats(statsList = statsList1, vec = vec2)
expectedValue <- function(vec){
return(sum(vec)/length(vec))
}
standardDeviation <- function(vec){
return(sqrt(sum((vec-expectedValue(vec))^2)/length(vec)))
}
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 605 Fundamentals of Computational Mathematics/Assignment 7")
autodata <- scan("auto-mpg.data")
autodata <- t(matrix(autodata, nrow = 5))
means <- colMeans(autodata)
autodataCov <- matrix(ncol = ncol(autodata), nrow = nrow(autodata))
for(i in 1:ncol(autodata)){
autodataCov[,i] <- autodata[,i] - means[i]
}
meansCov <- colMeans(autodataCov)
covMat <- matrix(nrow = 5, ncol = 5)
for(i in 1:nrow(covMat)){
for(j in 1:ncol(covMat)){
covMat[i,j] <- mean(autodataCov[,i] * autodataCov[,j])
}
}
corrMat <- matrix(nrow = 5, ncol = 5)
for(i in 1:nrow(corrMat)){
for(j in 1:ncol(corrMat)){
corrMat[i,j] <- covMat[i,j] /
(standardDeviation(autodata[,i])*standardDeviation(autodata[,j]))
}
}
eigencov <- eigen(covMat)
eigencov
pcatruecov <- prcomp(covMat, center = TRUE, scale. = TRUE)
pcafalsecov <- prcomp(covMat, center = TRUE, scale. = FALSE)
pcatruecorr <- prcomp(corrMat, center = TRUE, scale. = TRUE)
pcafalsecorr <- prcomp(corrMat, center = TRUE, scale. = FALSE)
eigencov
eigencov$vectors
pcafalsecov$rotation
pca <- prcomp(covMat, center = TRUE, scale. = FALSE)
expectedValue <- function(vec){
return(sum(vec)/length(vec))
}
standardDeviation <- function(vec){
return(sqrt(sum((vec-expectedValue(vec))^2)/length(vec)))
}
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 605 Fundamentals of Computational Mathematics/Assignment 7")
autodata <- scan("auto-mpg.data")
autodata <- t(matrix(autodata, nrow = 5))
means <- colMeans(autodata)
autodataCov <- matrix(ncol = ncol(autodata), nrow = nrow(autodata))
for(i in 1:ncol(autodata)){
autodataCov[,i] <- autodata[,i] - means[i]
}
meansCov <- colMeans(autodataCov)
covMat <- matrix(nrow = 5, ncol = 5)
for(i in 1:nrow(covMat)){
for(j in 1:ncol(covMat)){
covMat[i,j] <- mean(autodataCov[,i] * autodataCov[,j])
}
}
corrMat <- matrix(nrow = 5, ncol = 5)
for(i in 1:nrow(corrMat)){
for(j in 1:ncol(corrMat)){
corrMat[i,j] <- covMat[i,j] /
(standardDeviation(autodata[,i])*standardDeviation(autodata[,j]))
}
}
proj <- autodata %*% pca$rotation
pairs(autodata)
pairs(proj)
pairs(proj)
proj
autodata
pca$rotation
pca <- prcomp(covMat, center = TRUE, scale. = FALSE)
proj <- autodata %*% pca$rotation
pairs(autodata)
pairs(proj)
pca <- prcomp(covMat, center = TRUE, scale. = TRUE)
proj <- autodata %*% pca$rotation
pairs(proj)
?prcomp
pcatrue <- prcomp(covMat, center = TRUE, scale. = TRUE)
pairs(autodata %*% pcatrue$rotation)
