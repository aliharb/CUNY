exponentformat = "B",
gridcolor = "#eee",
gridwidth = 1,
linecolor = "#444",
linewidth = 1,
mirror = FALSE,
nticks = 0,
overlaying = FALSE,
position = 0,
range = c(0.698980123539, 77.6989801235),
rangemode = "normal",
showexponent = "all",
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tick0 = 0,
tickangle = "auto",
tickcolor = "#444",
tickfont = list(
color = "",
family = "",
size = 0
),
ticklen = 5,
ticks = "",
tickwidth = 1,
title = "Click to enter X2 axis title",
titlefont = list(
color = "",
family = "",
size = 0
),
type = "linear",
zeroline = TRUE,
zerolinecolor = "#444",
zerolinewidth = 1
),
xaxis3 = list(
anchor = "y3",
autorange = TRUE,
autotick = TRUE,
domain = c(0, 1),
dtick = 10,
exponentformat = "B",
gridcolor = "#eee",
gridwidth = 1,
linecolor = "#444",
linewidth = 1,
mirror = FALSE,
nticks = 0,
overlaying = FALSE,
position = 0,
range = c(0.5, 77.5),
rangemode = "normal",
showexponent = "all",
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tick0 = 0,
tickangle = "auto",
tickcolor = "#444",
tickfont = list(
color = "",
family = "",
size = 0
),
ticklen = 5,
ticks = "",
tickwidth = 1,
title = "Click to enter X3 axis title",
titlefont = list(
color = "",
family = "",
size = 0
),
type = "linear",
zeroline = TRUE,
zerolinecolor = "#444",
zerolinewidth = 1
),
yaxis = list(
anchor = "x",
autorange = TRUE,
autotick = TRUE,
domain = c(0, 0.2025),
dtick = 200000,
exponentformat = "B",
gridcolor = "#eee",
gridwidth = 1,
linecolor = "#444",
linewidth = 1,
mirror = FALSE,
nticks = 0,
overlaying = FALSE,
position = 0,
range = c(0, 743807.368421),
rangemode = "normal",
showexponent = "all",
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tick0 = 0,
tickangle = "auto",
tickcolor = "#444",
tickfont = list(
color = "",
family = "",
size = 0
),
ticklen = 5,
ticks = "",
tickwidth = 1,
title = "Click to enter Y axis title",
titlefont = list(
color = "",
family = "",
size = 0
),
type = "linear",
zeroline = TRUE,
zerolinecolor = "#444",
zerolinewidth = 1
),
yaxis2 = list(
anchor = "x2",
autorange = TRUE,
autotick = TRUE,
domain = c(0.55, 1),
dtick = 10,
exponentformat = "B",
gridcolor = "#eee",
gridwidth = 1,
linecolor = "#444",
linewidth = 1,
mirror = FALSE,
nticks = 0,
overlaying = FALSE,
position = 0,
range = c(0, 30.5263157895),
rangemode = "normal",
showexponent = "all",
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tick0 = 0,
tickangle = "auto",
tickcolor = "#444",
tickfont = list(
color = "",
family = "",
size = 0
),
ticklen = 5,
ticks = "",
tickwidth = 1,
title = "Click to enter Y2 axis title",
titlefont = list(
color = "",
family = "",
size = 0
),
type = "linear",
zeroline = TRUE,
zerolinecolor = "#444",
zerolinewidth = 1
),
yaxis3 = list(
anchor = "x3",
autorange = TRUE,
autotick = TRUE,
domain = c(0.2475, 0.45),
dtick = 5,
exponentformat = "B",
gridcolor = "#eee",
gridwidth = 1,
linecolor = "#444",
linewidth = 1,
mirror = FALSE,
nticks = 0,
overlaying = FALSE,
position = 0,
range = c(0, 20.4210227493),
rangemode = "normal",
showexponent = "all",
showgrid = TRUE,
showline = FALSE,
showticklabels = TRUE,
tick0 = 0,
tickangle = "auto",
tickcolor = "#444",
tickfont = list(
color = "",
family = "",
size = 0
),
ticklen = 5,
ticks = "",
tickwidth = 1,
title = "Click to enter Y3 axis title",
titlefont = list(
color = "",
family = "",
size = 0
),
type = "linear",
zeroline = TRUE,
zerolinecolor = "#444",
zerolinewidth = 1
)
)
response <- py$plotly(data, kwargs=list(layout=layout))
py$plotly(data, kwargs=list(layout=layout))
py
py <- plotly(username='charleyferrari', key='oksysax3g0')
install.packages("plot_ly")
library(Rtools)
install.packages("devtools")
install.packages("Rtools")
install.packages("bigvis")
devtools::install_github("hadley/bigvis")
library(bigvis)
install.packages("Rcpp")
install.packages("Rcpp")
library(bigvis)
devtools::find_rtools()
iris
iris <- iris
py <- plotly(username='charleyferrari', key='oksysax3g0')
install.packages("plotly")
library(plotly)
py <- plotly(username='charleyferrari', key='oksysax3g0')
dsamp <- diamonds[sample(nrow(diamonds), 1000), ]
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
qplot(carat, price, data=dsamp, colour=clarity)
ggplotly()
q <- qplot(carat, price, data=dsamp, colour=clarity)
q <- ggplotly(q)
plot_ly(q)
py <- plot_ly(username='charleyferrari', key='oksysax3g0')
?plot_ly
plot_ly(q)
?plot_ly
plotly_POST(q)
View(q)
q <- qplot(carat, price, data=dsamp, colour=clarity)
q
q <- ggplotly(q)
plot_ly(q)
ggplotly(q)
q <- qplot(carat, price, data=dsamp, colour=clarity)
ggplotly(q)
install.packages("faraway")
library(faraway)
pima
summary(pima)
sort(pima$diastolic)
pima$diastolic[pima$diastolic == 0] <- NA
pima$test <- factor(pima$test)
levels(pima$test)
levels(pima$test) <- c('negative', 'positive')
hist(pima$diastolic)
plot(density(pima$diastolic, na.rm = TRUE))
library(ggplot2)
library(MASS)
library(knitr)
library(dplyr)
library(faraway)
setwd("/Users/Charley/Downloads/cuny/IS 621 Business Analytics and Data Mining/Homework 1")
cigarettes <- read.csv("cigarette-training-data.csv")
northeast <- c("ME", "NH", "VT", "MA", "RI", "CT", "NY", "PA", "NJ")
midwest <- c("ND", "SD", "NE", "KS", "MN", "IA", "MO", "IL", "WI", "MI",
"IN", "OH", "IO", "KA", "NB")
south <- c("DE", "MD", "DC", "WV", "VA", "KY", "NC", "TN", "SC", "GA",
"AL","MS","AR","LA","OK","TX", "FL")
west <- c("WA", "OR", "ID", "MT", "WY", "CA", "NV", "UT", "CO", "AZ", "NM", "AK", "HI")
regionlookup <- rbind(data.frame(Region = "Northeast", State = northeast),
data.frame(Region = "Midwest", State = midwest),
data.frame(Region = "South", State = south),
data.frame(Region = "West", State = west))
cigarettesregion <- merge(cigarettes,regionlookup, by="State")
filteredcigarettes <- filter(cigarettes, Sales < 135 & Sales > 82)
filteredcigarettesregion <- merge(filteredcigarettes,regionlookup, by="State")
rm(midwest, northeast, south, west, regionlookup)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
residtest <- data.frame(Sales = filteredcigarettes$Sales,
IncomeResid =
lm(Sales ~ poly(Income,2), data=filteredcigarettes)$residuals,
PriceResid =
lm(Sales ~ poly(Price,2), data=filteredcigarettes)$residuals,
AgeResid =
lm(Sales ~ poly(Age,2), data=filteredcigarettes)$residuals)
g1 <- ggplot(residtest, aes(x=Sales, y=IncomeResid)) + geom_point() +
stat_smooth(method="lm")
g2 <- ggplot(residtest, aes(x=Sales, y=PriceResid)) + geom_point() +
stat_smooth(method="lm")
g3 <- ggplot(residtest, aes(x=Sales, y=AgeResid)) + geom_point() +
stat_smooth(method="lm")
multiplot(g1, g2, g3, cols=2)
rm(g1, g2, g3)
residtest <- data.frame(Sales = filteredcigarettes$Sales,
IncomeResid =
lm(Sales ~ poly(Income,2), data=filteredcigarettes)$residuals,
PriceResid =
lm(log(Sales) ~ Price, data=filteredcigarettes)$residuals,
AgeResid =
lm(Sales ~ poly(Age,2), data=filteredcigarettes)$residuals)
g1 <- ggplot(residtest, aes(x=Sales, y=IncomeResid)) + geom_point() +
stat_smooth(method="lm")
g2 <- ggplot(residtest, aes(x=Sales, y=PriceResid)) + geom_point() +
stat_smooth(method="lm")
g3 <- ggplot(residtest, aes(x=Sales, y=AgeResid)) + geom_point() +
stat_smooth(method="lm")
multiplot(g1, g2, g3, cols=2)
model <- lm(Sales ~ Age + poly(Income,2) + Price + Region,
data = filteredcigarettesregion)
summary(model)
plot(model)
plot(model,which=1)
data <- data.frame(fitted = model$fitted.values, resid = model$residuals,
actual = filteredcigarettesregion$Sales,
actualtest = model$fitted.values + model$residuals)
View(data)
ggplot(data, aes(x=fitted, y=resid)) + geom_line()
plot(model,which=1)
ggplot(data, aes(x=fitted, y=resid)) + geom_point()
ggplot(data, aes(x=fitted, y=actual)) + geom_point()
model <- lm(Sales ~ poly(Age,2) + poly(Income,2) + poly(Price,2) + Region,
data = filteredcigarettesregion)
summary(model)
plot(model,which=1)
data <- data.frame(fitted = model$fitted.values, resid = model$residuals,
actual = filteredcigarettesregion$Sales,
actualtest = model$fitted.values + model$residuals)
ggplot(data, aes(x=fitted, y=actual)) + geom_point()
model <- lm(log(Sales) ~ Age + poly(Income,2) + Price + Region,
data = filteredcigarettesregion)
summary(model)
plot(model,which=1)
data <- data.frame(fitted = model$fitted.values, resid = model$residuals,
actual = filteredcigarettesregion$Sales,
actualtest = model$fitted.values + model$residuals)
ggplot(data, aes(x=fitted, y=actual)) + geom_point()
ggplot(data, aes(x=actual, y=resid)) + geom_point()
plot(model,which=1)
ggplot(data, aes(x=fitted, y=residuals)) + geom_point()
ggplot(data, aes(x=fitted, y=resid)) + geom_point()
plot(model,which=1)
ggplot(data, aes(x=actual, y=resid)) + geom_point()
ggplot(data, aes(x=fitted, y=resid)) + geom_point()
ggplot(filter(data,actual<85), aes(x=fitted, y=resid)) + geom_point()
ggplot(filter(data,actual>85), aes(x=fitted, y=resid)) + geom_point()
northeast <- c("ME", "NH", "VT", "MA", "RI", "CT", "NY", "PA", "NJ")
midwest <- c("ND", "SD", "NE", "KS", "MN", "IA", "MO", "IL", "WI", "MI",
"IN", "OH", "IO", "KA", "NB")
south <- c("DE", "MD", "DC", "WV", "VA", "KY", "NC", "TN", "SC", "GA",
"AL","MS","AR","LA","OK","TX", "FL")
west <- c("WA", "OR", "ID", "MT", "WY", "CA", "NV", "UT", "CO", "AZ", "NM", "AK", "HI")
regionlookup <- rbind(data.frame(Region = "Northeast", State = northeast),
data.frame(Region = "Midwest", State = midwest),
data.frame(Region = "South", State = south),
data.frame(Region = "West", State = west))
cigarettesregion <- merge(cigarettes,regionlookup, by="State")
filteredcigarettes <- filter(cigarettes, Sales < 135 & Sales > 83)
filteredcigarettesregion <- merge(filteredcigarettes,regionlookup, by="State")
rm(midwest, northeast, south, west, regionlookup)
ggplot(data, aes(x=fitted, y=resid)) + geom_point()
ggplot(data, aes(x=actual, y=resid)) + geom_point()
northeast <- c("ME", "NH", "VT", "MA", "RI", "CT", "NY", "PA", "NJ")
midwest <- c("ND", "SD", "NE", "KS", "MN", "IA", "MO", "IL", "WI", "MI",
"IN", "OH", "IO", "KA", "NB")
south <- c("DE", "MD", "DC", "WV", "VA", "KY", "NC", "TN", "SC", "GA",
"AL","MS","AR","LA","OK","TX", "FL")
west <- c("WA", "OR", "ID", "MT", "WY", "CA", "NV", "
northeast <- c("ME", "NH", "VT", "MA", "RI", "CT", "NY", "PA", "NJ")
midwest <- c("ND", "SD", "NE", "KS", "MN", "IA", "MO", "IL", "WI", "MI",
"IN", "OH", "IO", "KA", "NB")
south <- c("DE", "MD", "DC", "WV", "VA", "KY", "NC", "TN", "SC", "GA",
"AL","MS","AR","LA","OK","TX", "FL")
west <- c("WA", "OR", "ID", "MT", "WY", "CA", "NV", "UT", "CO", "AZ", "NM", "AK", "HI")
regionlookup <- rbind(data.frame(Region = "Northeast", State = northeast),
data.frame(Region = "Midwest", State = midwest),
data.frame(Region = "South", State = south),
data.frame(Region = "West", State = west))
cigarettesregion <- merge(cigarettes,regionlookup, by="State")
filteredcigarettes <- filter(cigarettes, Sales < 135 & Sales > 83)
filteredcigarettesregion <- merge(filteredcigarettes,regionlookup, by="State")
rm(midwest, northeast, south, west, regionlookup)
northeast <- c("ME", "NH", "VT", "MA", "RI", "CT", "NY", "PA", "NJ")
midwest <- c("ND", "SD", "NE", "KS", "MN", "IA", "MO", "IL", "WI", "MI",
"IN", "OH", "IO", "KA", "NB")
south <- c("DE", "MD", "DC", "WV", "VA", "KY", "NC", "TN", "SC", "GA",
"AL","MS","AR","LA","OK","TX", "FL")
west <- c("WA", "OR", "ID", "MT", "WY", "CA", "NV", "UT", "CO", "AZ", "NM", "AK", "HI")
regionlookup <- rbind(data.frame(Region = "Northeast", State = northeast),
data.frame(Region = "Midwest", State = midwest),
data.frame(Region = "South", State = south),
data.frame(Region = "West", State = west))
cigarettesregion <- merge(cigarettes,regionlookup, by="State")
filteredcigarettes <- filter(cigarettes, Sales < 135 & Sales > 82)
filteredcigarettesregion <- merge(filteredcigarettes,regionlookup, by="State")
rm(midwest, northeast, south, west, regionlookup)
View(filteredcigarettesregion)
northeast <- c("ME", "NH", "VT", "MA", "RI", "CT", "NY", "PA", "NJ")
midwest <- c("ND", "SD", "NE", "KS", "MN", "IA", "MO", "IL", "WI", "MI",
"IN", "OH", "IO", "KA", "NB")
south <- c("DE", "MD", "DC", "WV", "VA", "KY", "NC", "TN", "SC", "GA",
"AL","MS","AR","LA","OK","TX", "FL")
west <- c("WA", "OR", "ID", "MT", "WY", "CA", "NV", "UT", "CO", "AZ", "NM", "AK", "HI")
regionlookup <- rbind(data.frame(Region = "Northeast", State = northeast),
data.frame(Region = "Midwest", State = midwest),
data.frame(Region = "South", State = south),
data.frame(Region = "West", State = west))
cigarettesregion <- merge(cigarettes,regionlookup, by="State")
filteredcigarettes <- filter(cigarettes, Sales < 135 & Sales > 83)
filteredcigarettesregion <- merge(filteredcigarettes,regionlookup, by="State")
rm(midwest, northeast, south, west, regionlookup)
View(filteredcigarettesregion)
model <- lm(log(Sales) ~ Age + poly(Income,2) + poly(Price,2) + Region,
data = filteredcigarettesregion)
data <- data.frame(fitted = model$fitted.values, resid = model$residuals,
actual = filteredcigarettesregion$Sales,
actualtest = model$fitted.values + model$residuals)
ggplot(data, aes(x=fitted, y=resid)) + geom_point()
ggplot(data, aes(x=actual, y=resid)) + geom_point()
model <- lm(I(Sales^3) ~ Age + poly(Income,2) + Price + Region,
data = filteredcigarettesregion)
data <- data.frame(fitted = model$fitted.values, resid = model$residuals,
actual = filteredcigarettesregion$Sales,
actualtest = model$fitted.values + model$residuals)
ggplot(data, aes(x=actual, y=resid)) + geom_point()
data
model$fitted.values
fitted(model)
as.numeric(model$fitted.values)
data <- data.frame(fitted = as.numeric(model$fitted.values),
resid = as.numeric(model$residuals),
actual = filteredcigarettesregion$Sales,
actualtest = model$fitted.values + model$residuals)
ggplot(data, aes(x=actual, y=resid)) + geom_point()
model <- lm(I(Sales^4) ~ Age + poly(Income,2) + Price + Region,
data = filteredcigarettesregion)
data <- data.frame(fitted = as.numeric(model$fitted.values),
resid = as.numeric(model$residuals),
actual = filteredcigarettesregion$Sales,
actualtest = model$fitted.values + model$residuals)
ggplot(data, aes(x=actual, y=resid)) + geom_point()
model <- lm(I(Sales^2) ~ Age + poly(Income,2) + Price + Region,
data = filteredcigarettesregion)
data <- data.frame(fitted = as.numeric(model$fitted.values),
resid = as.numeric(model$residuals),
actual = filteredcigarettesregion$Sales,
actualtest = model$fitted.values + model$residuals)
ggplot(data, aes(x=actual, y=resid)) + geom_point()
model <- lm(Sales ~ Age + poly(Income,2) + Price + Region,
data = filteredcigarettesregion)
boxcox(model, plotit=T, lambda = seq(-10,10,by=0.1))
summary(model)
model <- lm(Sales ~ Age + poly(Income,2) + Price + Region,
data = filteredcigarettesregion)
summary(model)
cor(filteredcigarettes)
View(filteredcigarettes)
cor(dplyr::select(filteredcigarettes,-State))
data <- data.frame(fitted = as.numeric(model$fitted.values),
resid = as.numeric(model$residuals),
actual = filteredcigarettesregion$Sales,
actualtest = model$fitted.values + model$residuals)
ggplot(data, aes(x=actual, y=resid)) + geom_point()
?geom_boxplot
plot(model)
ggplot(data, aes(x=actual, y=resid)) + geom_point()
ggplot(data, aes(x=fitted, y=resid)) + geom_point()
ggplot(data, aes(x=actual, y=resid)) + geom_point() + stat_smooth(method="lm")
ggplot(data, aes(x=fitted, y=resid)) + geom_point() + stat_smooth(method="lm")
