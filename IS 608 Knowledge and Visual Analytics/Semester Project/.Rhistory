matrixPower <- function(A){
return(A %*% A)
}
?replicate
?repeate
matrixPower <- function(A, power){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% A, power - 1))
}
}
r22 <- matrixPower(B) %*% r
r22 <- matrixPower(B,2) %*% r
r2
r22
k <- 30
rk <- matrixPower(B,k) %*% r
rk
k <- 60
rk <- matrixPower(B,k) %*% r
rk
k <- 600
rk <- matrixPower(B,k) %*% r
rk
k <- 100
rk <- matrixPower(B,k) %*% r
rk
k <- 10
rk <- matrixPower(B,k) %*% r
rk
matrixPower(B,600)
B%*%B

v


%*%B%*%B%*%B%*%B%*%B%*%B%*%B%*%B%*%B%*%B
B%*%B%*%B%*%B%*%B
matrixPower(B,5)
matrixPower(B,4)
matrixPower(B,6)
matrixPower(B,2) == B %*% B
matrixPower(B,5) == B %*% B %*% B %*% B %*% B
matrixPower(B,3) == B %*% B %*% B
B %*% B
(B %*% B) %*% B == matrixPower(B,3)
B
B %*% B
B %*% B %*% B
B %*% B %*% B == (B%*%B)%*%B
B %*% B %*% B == matrixPower(B,3)
B %*% B == matrixPower(B,2)
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
B %*% B %*% B == matrixPower(B,3)
matrixPower(B,3
asd
fa
B %*% B %*% B == matrixPower(B,3,B)
B %*% B %*% B %*% B %*% B == matrixPower(B,5,B)
k <- 10
rk <- matrixPower(B,k,B) %*% r
rk
r
k <- 100
rk <- matrixPower(B,k,B) %*% r
rk
k <- 6000
rk <- matrixPower(B,k,B) %*% r
k <- 100
rk <- matrixPower(B,k,B) %*% r
rk
k <- 50
rk <- matrixPower(B,k,B) %*% r
rk
eigen(B)
rk
eigen(B)
eigen(B).values
eigen(B)$values
eigen(B)$values[1]
eigen(B)$vectors[1]
eigen(B)$vectors
rk
eigen(B)$vectors
A <- matrix(c(0, 1/2, 1/2, 0, 0,  0,
0, 0, 1, 0, 0, 0,
1/4, 1/4, 0, 0, 1/4, 1/4,
0, 0, 0, 0, 1/2, 1/2,
0, 0, 0, 1/2, 0, 1/2,
0, 0, 1/2, 1/2, 0, 0), nrow=6)
# Introduce decay d = 0.85
d <- 0.85
B <- 0.85*A + (0.15/6)
sum(B[,1])
sum(B[,2])
sum(B[,3])
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
k <- 50
rk <- matrixPower(B,k,B) %*% r
rk
k <- 50
rk <- matrixPower(B,k,B) %*% r
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6),nrow=6)
k <- 50
rk <- matrixPower(B,k,B) %*% r
rk
eigen(B)$values[1]
eigen(B)$vectors
eigen(B)$vectors[1]
eigen(B)$vectors[[1]]
eigen(B)$vectors[,1]
B %*% r
install.packages('graph')
install.packages('igraph')
library(igraph)
page.rank(A)
?page.rank
?graph
graph(A)
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David", "David", "Esmeralda"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob", "Alice"),
weight=c(4,5,5,2,1,1))
relations
relations <- data.frame(from=c(1,1,2,3,3,3,4,4,5,5,6),
to = c(2,3,3,1,2,5,6,5,6,4,6,4),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1))
relations <- data.frame(from=c(1,1,2,3,3,3,3,4,4,5,5,6),
to = c(2,3,3,1,2,5,6,5,6,4,6,4),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1))
g <- graph.data.frame(relations, directed=TRUE)
plot(g, edge.width=E(g)$weight)
page.rank(g)
rk
?page.rank
page.rank(g)
page.rank(g, damping=0.85)
rk
eigen(B)$values[1]
eigen(B)$vectors[,1]
eigen(B)
eigen(A)
eigen(A) == eigen(B)
eigen(A)$values == eigen(B)$values
eigen(A)
A <- c(0,1/2,1/2,0,0,0,0,0,
0,0,0,1,0,0,0,0,
0,1/2,0,0,1/2,0,0,0,
0,1/3,0,0,1/3,1/3,0,0,
0,0,0,0,0,1/3,1/3,1/3,
0,0,0,0,0,0,0,1,
1/3,0,0,0,1/3,0,0,1/3,
0,0,0,0,0,1/2,1/2,0),nrow=8)
c(0,1/2,1/2,0,0,0,0,0,
0,0,0,1,0,0,0,0,
0,1/2,0,0,1/2,0,0,0,
0,1/3,0,0,1/3,1/3,0,0,
0,0,0,0,0,1/3,1/3,1/3,
0,0,0,0,0,0,0,1,
1/3,0,0,0,1/3,0,0,1/3,
0,0,0,0,0,1/2,1/2,0)
A <- c(0,1/2,1/2,0,0,0,0,0,
0,0,0,1,0,0,0,0,
0,1/2,0,0,1/2,0,0,0,
0,1/3,0,0,1/3,1/3,0,0,
0,0,0,0,0,1/3,1/3,1/3,
0,0,0,0,0,0,0,1,
1/3,0,0,0,1/3,0,0,1/3,
0,0,0,0,0,1/2,1/2,0),nrow=8)
c(0, 1/2, 1/2, 0,0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0)
c(0, 1/2, 1/2, 0,0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0),nrow=8)
c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0)
c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0),nrow=8)
A <- matrix(c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2. 1/2, 0), nrow=8)
A <- matrix(c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0),nrow=8))
matrix(c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0),nrow=8))
A <- matrix(c(0, 1/2, 1/2, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0,
0, 1/2, 0, 0, 1/2, 0, 0, 0,
0, 1/3, 0, 0, 1/3, 1/3, 0, 0,
0, 0, 0, 0, 0, 1/3, 1/3, 1/3,
0, 0, 0, 0, 0, 0, 0, 1,
1/3, 0, 0, 0, 1/3, 0, 0, 1/3,
0, 0, 0, 0, 0, 1/2, 1/2, 0),nrow=8)
A
matrix(c(1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8), nrow=8)
matrixPower(A, 50, A) %*%
matrix(c(1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8), nrow=8)
matrixPower(A, 500, A) %*%
matrix(c(1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8, 1/8), nrow=8)
eigen(A)
relations <- data.frame(from =   c(1,1,2,3,3,4,4,4,5,5,5,6,7,7,7,8,8),
to =     c(2,3,4,2,5,2,5,6,6,7,8,8,1,5,8,7,6),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
g <- graph.data.frame(relations, directed=TRUE)
page.rank(g)
plot(g)
eigten(A)
eigen(A)
page.rank(g, damper=1)
page.rank(g, damp=1)
page.rank(g, damp=0)
A <- matrix(c(0, 1/2, 1/2, 0, 0,  0,
0, 0, 1, 0, 0, 0,
1/4, 1/4, 0, 0, 1/4, 1/4,
0, 0, 0, 0, 1/2, 1/2,
0, 0, 0, 1/2, 0, 1/2,
0, 0, 1/2, 1/2, 0, 0), nrow=6)
# Introduce decay d = 0.85
d <- 0.85
B <- 0.85*A + (0.15/6)
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6),nrow=6)
k <- 50
rk <- matrixPower(B,k,B) %*% r
rk
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6),nrow=6)
k <- 5000
rk <- matrixPower(B,k,B) %*% r
rk
A %*% r
eigen(B)$values[1]
eigen(B)$vectors[,1]
rk
page.rank(g)
relations <- data.frame(from=c(1,1,2,3,3,3,3,4,4,5,5,6),
to = c(2,3,3,1,2,5,6,5,6,4,6,4),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1))
g <- graph.data.frame(relations, directed=TRUE)
page.rank(g)
eigen(B)
A <- matrix(c(0, 1/2, 1/2, 0, 0,  0,
0, 0, 1, 0, 0, 0,
1/4, 1/4, 0, 0, 1/4, 1/4,
0, 0, 0, 0, 1/2, 1/2,
0, 0, 0, 1/2, 0, 1/2,
0, 0, 1/2, 1/2, 0, 0), nrow=6)
# Introduce decay d = 0.85
d <- 0.85
B <- 0.85*A + (0.15/6)
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6),nrow=6)
k <- 5000
rk <- matrixPower(B,k,B) %*% r
k <- 500
rk <- matrixPower(B,k,B) %*% r
rk
eigen(B)$values[1]
eigen(B)$vectors[,1]
eigen(B)$vectors[1,1]
rk[1] / eigen(B)$vectors[1,1]
(rk[1] / eigen(B)$vectors[,1]) * eigen(B)$vectors[,1]
rk
eigen(B)$vectors[,1]
(rk / eigen(B)$vectors[,1]) * eigen(B)$vectors[,1]
rk
eigen(B)$values[1]
rk / eigen(B)$vectors[,1]
library(igraph)
relations <- data.frame(from=c(1,1,2,3,3,3,3,4,4,5,5,6),
to = c(2,3,3,1,2,5,6,5,6,4,6,4),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1))
g <- graph.data.frame(relations, directed=TRUE)
eigen(B)
page.rank(g)
page.rank(g)$vector
(rk / page.rank(g)$vector) * page.rank(g)$vector
page.rank(g)
plot(g)
setwd('E:/Downloads/Courses/CUNY/SPS/Git/IS 608 Knowledge and Visual Analytics/Semester Project')
agent <- read.csv('agentdataprop.csv')
library(reshape)
agent2 <- melt(agent)
agent2 <- melt(agent, id=c(ActualDateDisplay, Sector))
agent2 <- melt(agent, id=c('ActualDateDisplay', 'Sector'))
View(agent2)
rm(agent2)
library(ggplot2)
econ <- read.csv('econdataprop.csv')
?strptime
econ$Date <- strptime(econ$Date, format="%m/%d/%Y")
View(econ)
View(econ)
geom_line()
ggplot(econ, aes(x=Date, y=Value.Add)) +
geom_line()
library(ggthemes)
theme_tufte()
ggplot(econ, aes(x=Date, y=Value.Add)) +
geom_line() +
theme_tufte()
library(dplyr)
?summarize
?group_by
?summarize
agent01 <- agent %>%
select(ActualDateDisplay, DemandScore) %>%
group_by(ActualDateDisplay) %>%
summarize(MeanCVS = mean(ActualDateDisplay))
View(agent01)
agent01$ActualDateDisplay <- strptime(agent01$ActualDateDisplay, format="%m/%d/%Y")
View(agent01)
agent01 <- arrange(agent01, ActualDateDisplay)
agent01 <- agent %>%
select(ActualDateDisplay, DemandScore) %>%
group_by(ActualDateDisplay) %>%
summarize(MeanCVS = mean(ActualDateDisplay)) %>%
arrange(ActualDateDisplay)
View(agent01)
agent01[order(agent01$ActualDateDisplay),]
agent01[order(as.date(agent01$ActualDateDisplay),]
agent01[order(as.date(agent01$ActualDateDisplay)),]
agent01$ActualDateDisplay <- strptime(agent01$ActualDateDisplay, format="%m/%d/%Y")
agent01[order(agent01$ActualDateDisplay),]
order(agent01$ActualDateDisplay)
agent01[,order(agent01$ActualDateDisplay)]
agent01[order(agent01$ActualDateDisplay),]
agent01$ActualDateDisplay
order(agent01$ActualDateDisplay)
agent01[order(agent01$ActualDateDisplay),]
agent01[order(agent01$ActualDateDisplay),,drop=FALSE]
agent01[order(agent01$ActualDateDisplay),]
arrange(agent01, date)
arrange(agent01, ActualDateDisplay)
install.packages("lubridate")
library(lubridate)
agent01 <- arrange(agent01, ActualDateDisplay)
?lubridate
agent01 <- agent01[order(agent01$ActualDateDisplay),]
View(agent01)
ggplot(econ, aes(x=Date, y=Value.Add)) +
geom_line() +
theme_tufte()
ggplot(agent01, aes(x=ActualDateDisplay, y=MeanCVS)) +
geom_line() +
theme_tufte()
View(agent01)
agent01 <- agent %>%
select(ActualDateDisplay, DemandScore) %>%
group_by(ActualDateDisplay) %>%
summarize(MeanCVS = mean(ActualDateDisplay))
View(agent01)
?summarize
agent01 <- agent %>%
select(ActualDateDisplay, DemandScore) %>%
group_by(ActualDateDisplay) %>%
summarize(MeanCVS = mean(DemandScore))
agent01$ActualDateDisplay <- strptime(agent01$ActualDateDisplay, format="%m/%d/%Y")
agent01 <- agent01[order(agent01$ActualDateDisplay),]
ggplot(agent01, aes(x=ActualDateDisplay, y=MeanCVS)) +
geom_line() +
theme_tufte()
ggplot(econ, aes(x=Date, y=Value.Add)) +
geom_line() +
theme_tufte()
agent02 <- agent %>%
select(ActualDate Display, ExportScore) %>%
group_by(ActualDateDisplay) %>%
summarize(MeanCVS = mean(ExportScore))
agent02$ActualDateDisplay <- strptime(agent02$ActualDateDisplay, format="%m/%d/%Y")
agent02 <- agent02[order(agent02$ActualDateDisplay),]
agent02 <- agent %>%
select(ActualDate Display, ExportScore) %>%
group_by(ActualDateDisplay) %>%
agent02 <- agent %>%
select(ActualDateDisplay, ExportScore) %>%
group_by(ActualDateDisplay) %>%
summarize(MeanCVS = mean(ExportScore))
agent02 <- agent %>%
select(ActualDateDisplay, ExportScore) %>%
group_by(ActualDateDisplay) %>%
summarize(MeanCVS = mean(ExportScore))
agent02$ActualDateDisplay <- strptime(agent02$ActualDateDisplay, format="%m/%d/%Y")
agent02 <- agent02[order(agent02$ActualDateDisplay),]
ggplot(econ, aes(x=Date, y=Exports)) +
geom_line() +
theme_tufte()
ggplot(agent02, aes(x=ActualDateDisplay, y=MeanCVS)) +
geom_line() +
theme_tufte()
ggplot(econ, aes(x=Date, y=Exports)) +
geom_line() +
theme_tufte()
ggplot(agent02, aes(x=ActualDateDisplay, y=MeanCVS)) +
geom_line() +
theme_tufte()
agent03 <- agent %>%
filter(ActualDateDisplay == "1/1/2010") %>%
select(Sector, ExportScore)
ggplot(agent03, aes(x=ExportScore)) +
geom_hist()
ggplot(agent03, aes(x=ExportScore)) +
geom_histogram()
ggplot(agent03, aes(x=ExportScore)) +
geom_density() +
theme_tufte()
agent04 <- agent %>%
filter(Sector == "Business and financial services") %>%
select(ActualDateDisplay, ExportScore) %>%
group_by(ActualDateDisplay) %>%
summarise(MeanCVS = mean(ExportScore))
agent04$ActualDateDisplay <- strptime(agent04$ActualDateDisplay, format="%m/%d/%Y")
agent04 <- agent04[order(agent04$ActualDateDisplay),]
agent05 <- agent03 %>%
filter(Sector == "Business and financial services")
ggplot(econ, aes(x=Date, y=Exports)) +
geom_line() +
theme_tufte()
ggplot(agent04, aes(x=ActualDateDisplay, y=MeanCVS)) +
geom_line() +
theme_tufte()
ggplot(agent05, aes(x=ExportScore)) +
geom_density() +
theme_tufte()
ggplot(agent03, aes(x=ExportScore)) +
geom_density() +
theme_tufte()
ggplot(agent03, aes(x=ExportScore)) +
geom_line(stat="density", colour="blue") +
theme_tufte()
ggplot(agent03, aes(x=ExportScore)) +
geom_density(fill="blue") +
theme_tufte()
ggplot(agent03, aes(x=ExportScore)) +
geom_density(fill="blue", alpht=.2) +
theme_tufte()
ggplot(agent03, aes(x=ExportScore)) +
geom_density(fill="blue", alpha=.2) +
theme_tufte()
ggplot(agent05, aes(x=ExportScore)) +
geom_density(fill="blue", alpha=.2) +
theme_tufte()
