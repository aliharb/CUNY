for(i in 1:M){
mu1 <- mu[i]
pvalues <- replicate(m,expr={
x <- rnorm(j, mean=mu1, sd=sigma)
ttest <- t.test(x,
alternative="greater", mu=mu0)
ttest$p.value
})
power[i,j/10] <- mean(pvalues <= 0.05)
}
}
power
power <- data.frame(power)
n <- c(10,20,30,40,50)
m <- 1000
mu0 <- 500
sigma <- 100
mu <- c(seq(450,650,10))
M <- length(mu)
power <- c()
for(j in n){
for(i in 1:M){
mu1 <- mu[i]
pvalues <- replicate(m,expr={
x <- rnorm(j, mean=mu1, sd=sigma)
ttest <- t.test(x,
alternative="greater", mu=mu0)
ttest$p.value
})
power <- c(power,mean(pvalues<=0.05))
}
}
expand.grid(n,mu)
expand.grid(mu,n)
table <- expand.grid(mu,n)
View(table)
colnames(table) <- c("mu","n")
View(table)
table$power <- power
View(table)
ggplot(table,aes(x=mu,y=power,color=n)) + geom_line()
ggplot(table,aes(x=mu,y=power,fill=n)) + geom_line()
ggplot(table,aes(x=mu,y=power,color=n)) + geom_line()
ggplot(table,aes(x=mu,y=power,color=as.factor(n))) + geom_line()
?dlnorm
x <- seq(-4,4,by=0.1)
x <- seq(-4,4,by=0.1)
ln <- dlnorm(x)
n <- dnorm(x)
x <- rlnorm(1000)
hist(x)
hist(e^x)
hist(exp(x))
x
hist(exp(x),breaks=40)
e^15
exp(15)
x <- rlnorm(100)
hist(x)
hist(exp(x),breaks=40)
x <- rlnorm(1000)
mean <- mean(rlnorm(1000))
replicate(1000,{mean <- c(mean,mean(rlnorm(1000)))})
repeat(1000,{mean <- c(mean,mean(rlnorm(1000)))})
rep
for(i in 1:1000){
mean <- mean,mean(rlnorm(1000))
}
for(i in 1:1000){
mean <- c(mean,mean(rlnorm(1000)))
}
hist(mean)
hist(mean,breaks=100)
qnorm(0.975)
library(bootstrap)
install.packages("bootstrap")
library(bootstrap)
n <- nrow(law)
LSAT
law
sample(c("A","B","C",size=5,replace=TRUE))
sample(c("A","B","C"),size=5,replace=TRUE))
sample(c("A","B","C"),size=5,replace=TRUE)
B <- 200
n <- nrow(law)
R <- numeric(B)
for(b in 1:B){
i <- sample(1:n, size=n, replace=TRUE)
LSAT <- law$LSAT[i]
GPA <- law$GPA[i]
R[b] <- cor(LSAT,GPA)
}
hist(R, prob=TRUE)
se.r <- sd(R)
sd(R)
install.packages("boot")
library(bootstrap)    #for the law data
print(cor(law$LSAT, law$GPA))
print(cor(law82$LSAT, law82$GPA))
#set up the bootstrap
B <- 200            #number of replicates
n <- nrow(law)      #sample size
R <- numeric(B)     #storage for replicates
#bootstrap estimate of standard error of R
for (b in 1:B) {
#randomly select the indices
i <- sample(1:n, size = n, replace = TRUE)
LSAT <- law$LSAT[i]       #i is a vector of indices
GPA <- law$GPA[i]
R[b] <- cor(LSAT, GPA)
}
#output
print(se.R <- sd(R))
hist(R, prob = TRUE)
patch
n <- nrow(law)
n <- nrow(law)
theta.hat <- cor(law$LSAT, law$GPA)
theta.jack <- numeric(n)
for(i in 1:n){
theta.jack[i] <- cor(law$LSAT[-i],law$GPA[-i])
}
se.jack <- sd(theta.jack)
condit
aircondit
library(boot)
aircondit
length(aircondit)
dim(aircondit)
sum(aircondit)
ltheta <- function(lambda){
return((lambda^(dim(aircondit)[1]))*exp(-lambda*sum(aircondit)))
}
x <- seq(-10,10,by=0.1)
y <- ltheta(x)
plot(x,y)
x <- seq(0,10,by=0.1)
y <- ltheta(x)
plot(x,y)
x <- seq(1,10,by=0.1)
y <- ltheta(x)
plot(x,y)
lambda <- 1.1
exp(-lambda*sum(aircondit))
-lambda*sum(aircondit)
?mle
lambda.hat <- dim(aircondit)[1]/sum(aircondit)
nrow(aircondit)
?sample
B <- 1
b <- 1
sample(aircondit,n,replace=TRUE)
aircondit
aircondit$hours
lambda.hat <- length(aircondit$hours)/sum(aircondit$hours)
sample(aircondit$hours,n,replace=TRUE)
sample(aircondit$hours,n,replace=TRUE)
R[b] <- length(aircondit$hours)/sum(aircondit$hours)
R <- numeric(B)
B <- B <- 200
n <- nrow(aircondit)
R <- numeric(B)
for(b in 1:B){
acsamp <- sample(aircondit$hours,n,replace=TRUE)
R[b] <- length(aircondit$hours)/sum(aircondit$hours)
}
R
lambda.hat <- length(aircondit$hours)/sum(aircondit$hours)
library(booth)
library(boot)
library(bootstrap)
lambda.hat <- length(aircondit$hours)/sum(aircondit$hours)
B <- B <- 200
n <- nrow(aircondit)
R <- numeric(B)
for(b in 1:B){
acsamp <- sample(aircondit$hours,n,replace=TRUE)
R[b] <- length(aircondit$hours)/sum(aircondit$hours)
}
R
theta.boot <- mean(R)
lambda.hat
library(boot)
lambda.hat <- length(aircondit$hours)/sum(aircondit$hours)
B <- B <- 200
n <- nrow(aircondit)
R <- numeric(B)
sample(aircondit$hours,n,replace=TRUE)
sample(aircondit$hours,n,replace=TRUE)
lambda.hat <- length(aircondit$hours)/sum(aircondit$hours)
B <- B <- 200
n <- nrow(aircondit)
R <- numeric(B)
for(b in 1:B){
acsamp <- sample(aircondit$hours,n,replace=TRUE)
R[b] <- length(acsamp)/sum(acsamp)
}
R
theta.boot <- mean(R)
theta.boot
lambda.hat
sobolfunction <- function(n,D){
x <- sobol(D,n,scramble=TRUE)
x <- (x-0.5)*10
return(mean(apply(x,1,cofx,D=D)))
}
sobolcreate <- function(D){
n <- seq(1000,10000,by=1000)
means <- c()
sds <- c()
coefvars <- c()
for(i in n){
thetasample <- replicate(100,sobolfunction(i,D))
means <- c(means, mean(thetasample))
sds <- c(sds, sd(thetasample))
coefvars <- c(coefvars, mean(thetasample)/sd(thetasample))
}
table <- data.frame(n=n, means=means, sds=sds, coefvars=coefvars, D=D,
method="Sobol")
return(table)
}
binvec <- function(n){
return(rev(as.numeric(intToBits(n))[1:(floor(log(n)/log(2))+1)]))
}
mcalc <- function(k,r){
polys <- c(1,3,7,11,13,19,25,37,59,47,61,55,41,67,97,91,109,103,
115,131,193,137,145,143,241,157,185,167,229,171,213,191,
253,203,211,239,247,285,369,299,425,301,361,333,357,351,
501,355,397,391,451,463,487)
ivals <- t(matrix(c(1,1,1,1,1,1,1,1,
1,3,5,15,17,51,85,255,
1,1,7,11,13,61,67,79,
1,3,7,5,7,43,49,147,
1,1,5,3,15,51,125,141,
1,3,1,1,9,59,25,89,
1,1,3,7,31,47,109,173,
1,3,3,9,9,57,43,43,
1,3,7,13,3,35,89,9,
1,1,5,11,27,53,69,25,
1,3,5,1,15,19,113,115,
1,1,7,3,29,51,47,97,
1,3,7,7,21,61,55,19,
1,1,1,9,23,39,97,97,
1,3,3,5,19,33,3,197,
1,1,3,13,11,7,37,101,
1,1,7,13,25,5,83,255,
1,3,5,11,7,11,103,29,
1,1,1,3,13,39,27,203,
1,3,1,15,17,63,13,65),nrow=8))
m <- ivals[k,]
ppn <- polys[k]
c <- tail(binvec(ppn),-1)
deg <- length(c)
for(i in 8:r){
s <- 0
for(j in 1:deg){
s <- bitwXor(s,(2^j)*c[j]*m[i-j])
}
m <- c(m,bitwXor(s,m[i-deg]))
}
return(m[1:r])
}
vcalc <- function(k,r){
V <- diag(r)
if(k>=2){
for(i in 2:k){
m <- mcalc(i,r)
vk <- c()
for(j in 1:r){
h <- binvec(m[j])
h <- c(rep(0,j-length(h)), h, rep(0,r-j))
vk <- cbind(vk,as.matrix(h,nrow=r))
}
V <- abind(V,vk,along=3)
}
}
return(array(V,dim=c(r,r,k)))
}
scramblevcalc <- function(r){
scrambleapply <- function(rownum,r){
samp <- sample(c(1,0),rownum-1,replace=TRUE)
return(c(samp,1,rep(0,r-rownum)))
}
t(sapply(1:r,scrambleapply, r=r))
}
```
The sobol function uses these helper functions to generate a sobol sequence.
It takes the number of dimensions (or components), n, and a bool of whether
or not to scramble the sequence.
```{r, eval=FALSE}
sobol <- function(d,n,scramble=FALSE){
b <- 2
N <- 0:(n-1)
r <- floor(log(n-1)/log(b))+1
bb <- 1/b^(1:r)
bitcreate <- function(N,r){
return(as.numeric(intToBits(N))[1:r])
}
a <- t(apply(as.matrix(N,ncol=1),1,bitcreate, r=r))
p <- matrix(nrow=n,ncol=d)
V <- vcalc(d, r)
for(i in 1:d){
Vtemp <- V[,,i]
atv <- (a%*%t(Vtemp))%%b
if(scramble){
scramblevec <- scramblevcalc(r)
atv <- (atv%*%t(scramblevec))%%b
}
p[,i] <- bb %*% t(atv)
}
return(p)
}
sobolfunction(1000,2)
library(abind)
sobolfunction(1000,2)
cofx <- function(x,D){
theta.hat <- (1/((2*pi)^(D/2)))*exp((-1/2)*(t(x) %*% x))
return(theta.hat)
}
sobolfunction(1000,2)
sobol(2,1000)
library(ggplot2)
data.frame(sobol(2,1000))
soboldata <- data.frame(sobol(2,10))
data.frame(sobol(2,10))
soboldata <- data.frame(sobol(2,1000))
runifdata <- data.frame(x=runif(1000),y=runif(1000))
ggplot(soboldata,aes(x=x1,y=x2))+geom_point()
View(soboldata)
ggplot(soboldata,aes(x=X1,y=X2))+geom_point()
ggplot(runifdata,aes(x=x,y=y))+geom_point()
install.packages("quandl")
install.packages("Quandl")
Quandl("BITCOIN/CBXUSD", trim_start="2011-06-27", trim_end="2015-06-01")
library(Quandl)
Quandl("BITCOIN/CBXUSD", trim_start="2011-06-27", trim_end="2015-06-01")
bcusd <- Quandl("BITCOIN/CBXUSD", trim_start="2011-06-27", trim_end="2015-06-01")
View(bcusd)
typeof(bcusd)
bcusd$Close
typeof(bcusd$Close)
tail(bcusd,-1)
pcbcusd <- (tail(bcusd,-1)-head(bcusd,-1))/head(bcusd,-1)
typeof(bcusd$Close)
pcbcusd <- (tail(bcusd$Close,-1)-head(bcusd$Close,-1))/head(bcusd$Close,-1)
pcbcusd
pcbcusd <- ((tail(bcusd$Close,-1)-head(bcusd$Close,-1))/head(bcusd$Close,-1))*100
pcbcusd
hist(pcbcusd)
hist(pcbcusd,breaks=50)
hist(pcbcusd,breaks=100)
hist(pcbcusd,breaks=1000)
mean(pcbcusd)
Quandl.auth("1Cx13bkj4vDb7E13GLD6")
Quandl.api_key("1Cx13bkj4vDb7E13GLD6")
invpcbcusd <- ((tail(1/bcusd$Close,-1)-head(1/bcusd$Close,-1))/head(1/bcusd$Close,-1))*100
pcbcusd
invpcbcusd
pcbcusd
1/pcbcusd
hist(invpcbcusd,breaks=1000)
1/bcusd$Close
gbpusd <- Quandl("CURRFX/USDGBP", trim_start="1990-01-01", trim_end="2015-10-21")
gbpusd <- Quandl("CURRFX/USDGBP", trim_start="2011-06-27", trim_end="2015-06-01")
pcgbpusd <- ((tail(gbpusd,-1)-head(gbpusd,-1))/head(gbpusd,-1))*100
hist(pcgbpusd,breaks=1000)
pcgbpusd <- ((tail(gbpusd$Rate,-1)-head(gbpusd$Rate,-1))/head(gbpusd$Rate,-1))*100
hist(pcgbpusd,breaks=1000)
gldusd <- Quandl("WGC/GOLD_DAILY_USD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="1970-01-01", trim_end="2015-10-20")
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/head(gldusd$Value,-1))*100
hist(invpcbcusd,breaks=5000)
hist(pcgbpusd,breaks=5000)
length(gldusd)
length(pcgldusd)
length(pcgbpusd)
length(invpcbcusd)
length(gldusd$Value)
length(bcusd$Close)
bcusd$Date
bcusd <- Quandl("BITCOIN/CBXUSD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
invpcbcusd <- ((tail(1/bcusd$Close,-1)-head(1/bcusd$Close,-1))/head(1/bcusd$Close,-1))*100
gbpusd <- Quandl("CURRFX/USDGBP", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
pcgbpusd <- ((tail(gbpusd$Rate,-1)-head(gbpusd$Rate,-1))/head(gbpusd$Rate,-1))*100
gldusd <- Quandl("WGC/GOLD_DAILY_USD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-10-20")
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/head(gldusd$Value,-1))*100
bcusd <- Quandl("BITCOIN/CBXUSD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
invpcbcusd <- ((tail(1/bcusd$Close,-1)-head(1/bcusd$Close,-1))/head(1/bcusd$Close,-1))*100
gbpusd <- Quandl("CURRFX/USDGBP", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
pcgbpusd <- ((tail(gbpusd$Rate,-1)-head(gbpusd$Rate,-1))/head(gbpusd$Rate,-1))*100
gldusd <- Quandl("WGC/GOLD_DAILY_USD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-10-20")
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/head(gldusd$Value,-1))*100
bcusd <- Quandl("BITCOIN/CBXUSD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-05-01", trim_end="2015-06-01")
invpcbcusd <- ((tail(1/bcusd$Close,-1)-head(1/bcusd$Close,-1))/head(1/bcusd$Close,-1))*100
gbpusd <- Quandl("CURRFX/USDGBP", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-05-01", trim_end="2015-06-01")
pcgbpusd <- ((tail(gbpusd$Rate,-1)-head(gbpusd$Rate,-1))/head(gbpusd$Rate,-1))*100
gldusd <- Quandl("WGC/GOLD_DAILY_USD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-05-01", trim_end="2015-10-20")
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/head(gldusd$Value,-1))*100
pcgldusd
gldusd$Value
View(gldusd)
bcusd <- Quandl("BITCOIN/CBXUSD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-05-01", trim_end="2015-06-01")
invpcbcusd <- ((tail(1/bcusd$Close,-1)-head(1/bcusd$Close,-1))/head(1/bcusd$Close,-1))*100
gbpusd <- Quandl("CURRFX/USDGBP", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-05-01", trim_end="2015-06-01")
pcgbpusd <- ((tail(gbpusd$Rate,-1)-head(gbpusd$Rate,-1))/head(gbpusd$Rate,-1))*100
gldusd <- Quandl("WGC/GOLD_DAILY_USD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-05-01", trim_end="2015-06-01")
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/head(gldusd$Value,-1))*100
bcusd <- Quandl("BITCOIN/CBXUSD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
invpcbcusd <- ((tail(1/bcusd$Close,-1)-head(1/bcusd$Close,-1))/head(1/bcusd$Close,-1))*100
gbpusd <- Quandl("CURRFX/USDGBP", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
pcgbpusd <- ((tail(gbpusd$Rate,-1)-head(gbpusd$Rate,-1))/head(gbpusd$Rate,-1))*100
gldusd <- Quandl("WGC/GOLD_DAILY_USD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/head(gldusd$Value,-1))*100
hist(invpcbcusd,breaks=100)
hist(pcgbpusd,breaks=100)
hist(pcgldusd,breaks=100)
hist(invpcbcusd,breaks=100)
hist(pcgbpusd,breaks=100)
hist(pcgldusd,breaks=100)
install.packages("GGally")
library(GGally)
ggpairs(invpcbcusd,pcgbpusd,pcgldusd)
ggpairs(c(invpcbcusd,pcgbpusd,pcgldusd))
?ggpairs
var(c(1,2,3,4,5))
teststatpound <- (mean(pcgbpusd)-mean(invpcbcusd))/
sqrt((var(invpcbcusd)/length(invpcbcusd))+var(pcgbpusd)/length(pcgbpusd))
teststatgold <- (mean(pcgldusd)-mean(invpcbcusd))/
sqrt((var(invpcbcusd)/length(invpcbcusd))+var(pcgldusd)/length(pcgldusd))
library(Quandl)
bcusd <- Quandl("BITCOIN/CBXUSD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
invpcbcusd <- ((tail(1/bcusd$Close,-1)-head(1/bcusd$Close,-1))/head(1/bcusd$Close,-1))*100
gbpusd <- Quandl("CURRFX/USDGBP", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
pcgbpusd <- ((tail(gbpusd$Rate,-1)-head(gbpusd$Rate,-1))/head(gbpusd$Rate,-1))*100
gldusd <- Quandl("WGC/GOLD_DAILY_USD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/head(gldusd$Value,-1))*100
hist(invpcbcusd,breaks=100)
hist(pcgbpusd,breaks=100)
hist(pcgldusd,breaks=100)
library(Quandl)
bcusd <- Quandl("BITCOIN/CBXUSD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
invpcbcusd <- ((tail(1/bcusd$Close,-1)-head(1/bcusd$Close,-1))/head(1/bcusd$Close,-1))*100
gbpusd <- Quandl("CURRFX/USDGBP", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
pcgbpusd <- ((tail(gbpusd$Rate,-1)-head(gbpusd$Rate,-1))/head(gbpusd$Rate,-1))*100
gldusd <- Quandl("WGC/GOLD_DAILY_USD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/head(gldusd$Value,-1))*100
hist(invpcbcusd,breaks=100)
hist(pcgbpusd,breaks=100)
hist(pcgldusd,breaks=100)
teststatpound <- (mean(pcgbpusd)-mean(invpcbcusd))/
sqrt((var(invpcbcusd)/length(invpcbcusd))+var(pcgbpusd)/length(pcgbpusd))
teststatgold <- (mean(pcgldusd)-mean(invpcbcusd))/
sqrt((var(invpcbcusd)/length(invpcbcusd))+var(pcgldusd)/length(pcgldusd))
teststatpound
teststatgold
hist(invpcbcusd,breaks=100)
hist(pcgbpusd,breaks=100)
hist(pcgldusd,breaks=100)
bcusd <- Quandl("BITCOIN/CBXUSD", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
invpcbcusd <- ((tail(1/bcusd$Close,-1)-head(1/bcusd$Close,-1))/head(1/bcusd$Close,-1))*100
save.image("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Final Project/quandldata.RData")
devtools::install_github('jbryer/IS606')
instal.packages("lpsolve")
install.packages("lpsolve")
install.packages("lpSolve")
install.packages("lpSolveAPI")
library(lpSolveAPI)
library(lpSolveAPI)
#used for result visualization
library(ggplot2)
library(reshape)
library(gridExtra)
#define the datasets
install.packages("gridExtra")
train<-data.frame(wagon=c('w1','w2','w3'), weightcapacity=c(10,8,12), spacecapacity=c(5000,4000,8000))
cargo<-data.frame(type=c('c1','c2','c3','c4'), available=c(18,10,5,20), volume=c(400,300,200,500),profit=c(2000,2500,5000,3500))
View(cargo)
View(cargo)
lpmodel<-make.lp(2*NROW(train)+NROW(cargo),12)
lpmodel
column<-0
row<-0
for(wg in train$wagon){
row<-row+1
for(type in seq(1,NROW(cargo$type))){
column<-column+1
#this takes the arguments 'column','values' & 'indices' (as in where these values should be placed in the column)
set.column(lpmodel,column,c(1, cargo[type,'volume'],1), indices=c(row,NROW(train)+row, NROW(train)*2+type))
}}
lpmodel
train$weightcapacity
?lpsolve
?lpSolve
set.constr.value(lpmodel, rhs=train$weightcapacity, constraints=seq(1,NROW(train)))
#set rhs volume constraints
set.constr.value(lpmodel, rhs=train$spacecapacity, constraints=seq(NROW(train)+1,NROW(train)*2))
#set rhs volume constraints
set.constr.value(lpmodel, rhs=cargo$available, constraints=seq(NROW(train)*2+1,NROW(train)*2+NROW(cargo)))
#set objective coefficients
set.objfn(lpmodel, rep(cargo$profit,NROW(train)))
#set objective direction
lp.control(lpmodel,sense='max')
#I in order to be able to visually check the model, I find it useful to write the model to a text file
write.lp(lpmodel,'model.lp',type='lp')
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 609 Mathematical Modeling Techniques for Data Analytics/Week 9")
write.lp(lpmodel,'model.lp',type='lp')
View(train)
seq(1,NROW(cargo$type)
)
train$wagon
?make.lp
?set.column
lpmodel
