alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
for(letter in alpha){
lowestcostobj <- lowestcost(letter)
costs[letter] <- lowestcostobj$cost
assignments[letter,] <- lowestcostobj$assignments
}
costs
min(costs)
lowestcost <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, cost = highprob))
}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, cost = highprob))
}
highestprob(c("C","A","B","D"))
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probs <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probs[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$cost > highestprob(maxletter)$prob){
maxletter <- letter
}
}
highestprob("A")
highestprob("A")
vec <- "A"
highprob <- 1
1:length(vec)
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
as.numeric(probs[vec[i],i])
i <- 1
probs[vec[i],i]
vec[1]
probs
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
probslist <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probs[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter)$prob){
maxletter <- letter
}
}
highestprob("A")
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
probslist <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter)$prob){
maxletter <- letter
}
}
probs
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
highestprob("A")
probslist <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter)$prob){
maxletter <- letter
}
}
maxletter
maxletter
highestprob(maxletter)
maxletter
oldmax <- maxletter
c(oldmax,"A")
highestprob(c("C","D"))
highestprob(c("C","D","B","A"))
highestprob(c("C","D","A","B"))
highestprob(c("D","C","A","A"))
highestprob(c("A","D","C","B"))
highestprob(c("A","D","B","C"))
probslist <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter)$prob){
maxletter <- letter
}
}
maxletter
highestprob(maxletter)
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
"AB"[2]
"AB"
"AB[1"
?subst
?substr
substr("AB",1,1)
substr("AB",2,1)
substr("AB",2,2)
substr("AB",2)
stringind <- function(stringthing,n){
return(substr(stringthing,n,n))
}
alpha
probslist <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter)$prob){
maxletter <- letter
}
}
expand.grid(alpha,alpha)
choicelist <- expand.grid(alpha,alpha)
nrows(choicelist)
nrow(choicelist)
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
#
#veccost <- function(vec){
#  cost <- probs[vec[1],1]*probs[vec[2],2]*probs[vec[3],3]*probx[vec[4],4]
#  return(cost)
}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
#
#veccost <- function(vec){
#  cost <- probs[vec[1],1]*probs[vec[2],2]*probs[vec[3],3]*probx[vec[4],4]
#  return(cost)
#}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probslist1 <- list()
assignments1 <- matrix(nrow=4,ncol=4)
alpha1 <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter1 <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist1[letter] <- highprobobj$prob
assignments1[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter1)$prob){
maxletter1 <- letter
}
}
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
#
#veccost <- function(vec){
#  cost <- probs[vec[1],1]*probs[vec[2],2]*probs[vec[3],3]*probx[vec[4],4]
#  return(cost)
#}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probslist1 <- list()
assignments1 <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter1 <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist1[letter] <- highprobobj$prob
assignments1[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter1)$prob){
maxletter1 <- letter
}
}
maxletter1
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
#
#veccost <- function(vec){
#  cost <- probs[vec[1],1]*probs[vec[2],2]*probs[vec[3],3]*probx[vec[4],4]
#  return(cost)
#}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probslist1 <- list()
assignments1 <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter1 <- "A"
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
#
#veccost <- function(vec){
#  cost <- probs[vec[1],1]*probs[vec[2],2]*probs[vec[3],3]*probx[vec[4],4]
#  return(cost)
#}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probslist1 <- list()
assignments1 <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments1) <- alpha
maxletter1 <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist1[letter] <- highprobobj$prob
assignments1[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter1)$prob){
maxletter1 <- letter
}
}
maxletter1
highestprob(maxletter1)
row <- 1
choicelist[row,]
choicelist <- expand.grid(alpha,alpha)
choicelist[row,]
highestprob(choicelist[row,])
as.character(choicelist[row,])
choicelist
choicelist <- expand.grid(alpha,alpha,stringsAsFactors = FALSE)
highestprob(as.character(choicelist[row,]))
assignments2 <- matrix(nrow=16,ncol=4)
rownames(assignments2) <- paste(choicelist$Var1,choicelist$Var2,sep="")
assignments2
as.character(choicelist[row,])
list(16)
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 604 Simulation and Modeling techniques/Final Project/migration data")
library(plyr)
library(dplyr)
library(reshape)
data <- read.csv("cty_05_09.csv")
mig2014 <- read.csv("2014matrix.csv",header=TRUE,stringsAsFactors = FALSE)
migsame2014 <- read.csv("2014same.csv")
colnames(mig2014)[2:52] <-
as.character(migsame2014$State[1:(length(migsame2014$State)-1)])
colnames(mig2014)[54] <- "Puerto Rico"
for(state in as.character(migsame2014$State)){
mig2014[mig2014$X == state,state] <-
as.numeric(migsame2014[migsame2014$State == state,"Migration"])
}
as.character(migsame2014$State)
View(migsame2014)
mig <- melt(mig2014,measure.vars=colnames(mig2014)[2:length(colnames(mig2014))])
mig$year <- 2014
colnames(mig) <- c("source","destination","migration","year")
migtotal <- mig
for(year in c(2013,2012,2011,2010)){
mig <- read.csv(paste(year,"matrix.csv",sep=""),header=TRUE,
stringsAsFactors = FALSE)
migsame <- read.csv(paste(year,"same.csv",sep=""))
colnames(mig)[2:52] <-
as.character(migsame$State[1:(length(migsame$State)-1)])
colnames(mig)[54] <- "Puerto Rico"
for(state in as.character(migsame$State)){
mig[mig$X == state,state] <-
as.numeric(migsame[migsame$State == state,"Migration"])
}
mig <- melt(mig,measure.vars=colnames(mig)[2:length(colnames(mig))])
mig$year <- year
colnames(mig) <- c("source","destination","migration","year")
migtotal <- rbind(migtotal,mig)
}
for(year in c(2009,2008,2007,2006,2005)){
mig <- read.csv(paste(year,"matrix.csv",sep=""),header=TRUE,
stringsAsFactors = FALSE)
colnames(mig)[2:40] <-
as.character(migsame$State[1:39])
colnames(mig)[41] <- "Puerto Rico"
colnames(mig)[42:length(colnames(mig))] <-
as.character(migsame$State[40:(length(migsame$State)-1)])
mig <- melt(mig,measure.vars=colnames(mig)[2:length(colnames(mig))])
mig$year <- year
colnames(mig) <- c("source","destination","migration","year")
migtotal <- rbind(migtotal,mig)
}
migtotal$migration <- as.numeric(migtotal$migration)
View(mig)
View(migtotal)
migtotal$source <- as.factor(migtotal$source)
migsum <- migtotal %>% group_by(year) %>% summarize(sum = sum(migration))
View(migsum)
View(migtotal)
View(migsum)
View(migtotal)
rm(migsum)
migtest <- filter(migtotal, source == destination)
migtest <- filter(migtotal, as.character(source) == as.character(destination))
View(migtest)
migtest <- select(migtest,-source)
View(migtest)
migtestsum <- migtest %>% group_by(year) %>% summarize(sum = sum(migration))
View(migtestsum)
View(migtest)
View(migtestsum)
