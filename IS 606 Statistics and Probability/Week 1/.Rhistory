page.rank(g)
eigen(B)
A <- matrix(c(0, 1/2, 1/2, 0, 0,  0,
0, 0, 1, 0, 0, 0,
1/4, 1/4, 0, 0, 1/4, 1/4,
0, 0, 0, 0, 1/2, 1/2,
0, 0, 0, 1/2, 0, 1/2,
0, 0, 1/2, 1/2, 0, 0), nrow=6)
# Introduce decay d = 0.85
d <- 0.85
B <- 0.85*A + (0.15/6)
matrixPower <- function(A, power, B){
if(power == 1){
return(A)
}else{
return(matrixPower(A %*% B, power - 1, B))
}
}
r <- matrix(c(1/6,1/6,1/6,1/6,1/6,1/6),nrow=6)
k <- 5000
rk <- matrixPower(B,k,B) %*% r
k <- 500
rk <- matrixPower(B,k,B) %*% r
rk
eigen(B)$values[1]
eigen(B)$vectors[,1]
eigen(B)$vectors[1,1]
rk[1] / eigen(B)$vectors[1,1]
(rk[1] / eigen(B)$vectors[,1]) * eigen(B)$vectors[,1]
rk
eigen(B)$vectors[,1]
(rk / eigen(B)$vectors[,1]) * eigen(B)$vectors[,1]
rk
eigen(B)$values[1]
rk / eigen(B)$vectors[,1]
library(igraph)
relations <- data.frame(from=c(1,1,2,3,3,3,3,4,4,5,5,6),
to = c(2,3,3,1,2,5,6,5,6,4,6,4),
weight = c(1,1,1,1,1,1,1,1,1,1,1,1))
g <- graph.data.frame(relations, directed=TRUE)
eigen(B)
page.rank(g)
page.rank(g)$vector
(rk / page.rank(g)$vector) * page.rank(g)$vector
page.rank(g)
plot(g)
2
2**3
derivativex32x2 <- function(limit, x){
xprime <- x + limit
deltay <- (xprime**3 + 2*(xprime**2)) - (x**3 + 2*(x**2))
return(deltay/limit)
}
derivativex32x2(.005, 3)
3*(3**3) + 2*(3**2)
derivativex32x2(.00000005, 3)
3*(3**3) + 4*(3)
3*(3**2) + 4*(3)
derivativex32x2(.00005, 3)
xlist <- seq(1, 3, by=1e-6)
xlist
xlist^2
1:4^2
(1:4)^2
(1:4)**2
ylist <- 3*(xlist**2) + 4*xlist
ylistAreas <- ylist*1e-6
sum(ylistAreas)
(3**3 + 2*(3**2)) - (1**3 + 2*(1**2))
4^9
4^3
64^2
A <- matrix(c(1, 2, -2, 1, -1, 1, 3, 5, -2, 5, -9, 4), nrow=3)
A
A[2,] = A[2,] - 2*A[1,]
A
A[3,] = A[3,] + 2*A[1,]
A
A[2,] = A[2,]/-3
A
A[3,] <- A[3,] - 3*A[2,]
A
A[3,] <- A[3,]/3
A
A[2,] <- A[2,] - A[3,]/3
A
A[1,] <- A[1,] - 3*A[3,]
A
A <- matrix(c(1, 2, -2, 1, -1, 1, 3, 5, -2, 5, -9, 4), nrow=3)
A[2,] <- A[2,] - 2*A[1,]
A[3,] <- A[3,] + 2*A[1,]
A[2,] <- A[2,]/-3
A[3,] <- A[3,] - 3*A[2,]
A[3,] <- A[3,]/3
A
A <- matrix(c(1, 2, -2, 1, -1, 1, 3, 5, -2, 5, -9, 4), nrow=3)
A[2,] <- A[2,] - 2*A[1,]
A[3,] <- A[3,] + 2*A[1,]
A[2,] <- A[2,]/-3
A
A[3,] <- A[3,] - 3*A[2,]
A[3,] <- A[3,]/3
A
A <- matrix(c(1, 2, -2, 1, -1, 1, 3, 5, -2, 5, -9, 4), nrow=3)
qr(A)
tA <- t(A)
tA
A <- matrix(c(4,1,-1,0,-2,0,5,3,6),nrow=3)
A
eigen(A)
p.goodCredit <- 0.7
p.badCredit <- 0.3
p.goodCredit.loanDefault <- 0.04
p.goodCredit.noLoanDefault <- 0.96
p.badCredit.loanDefault <- 0.2
# Therefore:
p.badCredit.noLoadDefault <- 0.8
p.goodCredit.loanDefault.node <- p.goodCredit * p.goodCredit.loanDefault
p.goodCredit.noLoanDefault.node <- p.goodCredit * p.goodCredit.noLoanDefault
p.badCredit.loanDefault.node <- p.badCredit * p.badCredit.loanDefault
p,badCredit.noLoanDefault.node <- p.badCredit * p.badCredit.noLoanDefault
p.badCredit.noLoanDefault.node <- p.badCredit * p.badCredit.noLoanDefault
p.goodCredit <- 0.7
p.badCredit <- 0.3
p.goodCredit.loanDefault <- 0.04
# Therefore:
p.goodCredit.noLoanDefault <- 0.96
p.badCredit.loanDefault <- 0.2
# Therefore:
p.badCredit.noLoanDefault <- 0.8
# Given that you are looking at a defaulted loan, what is the p the probability that it
# belongs to someone with a bad credit score?
p.goodCredit.loanDefault.node <- p.goodCredit * p.goodCredit.loanDefault
p.goodCredit.noLoanDefault.node <- p.goodCredit * p.goodCredit.noLoanDefault
p.badCredit.loanDefault.node <- p.badCredit * p.badCredit.loanDefault
p.badCredit.noLoanDefault.node <- p.badCredit * p.badCredit.noLoanDefault
p.goodCredit.loanDefault.node+p.goodCredit.noLoanDefault.node+p.badCredit.loanDefault.node+p.badCredit.noLoanDefault.node
p.badCredit.givenLoanDefault <-
p.badCredit.loanDefault.node/(p.badCredit.loanDefault.node+p.goodCredit.loanDefault.node)
p.badCredit.givenLoanDefault
?cptable
library(gRain)
?cptable
library(gRain)
gb <- c("good credit", "bad credit")
dn <- c("default", "no default")
c <- cptable(~credit, values=c(p.goodCredit, p.badCredit), levels=gb)
d <- cptable(~default|credit, values=c(p.goodCredit.loanDefault,
p.goodCredit.noLoanDefault,
p.badCredit.loanDefault,
p.badCredit.noLoanDefault), levels=dn)
net <- grain(compileCPT(list(c,d)))
graph(net)
plot(net)
querygrain(net, nodes=c("credit","default"), type="marginal")
querygrain(net, nodes=c("credit","default"), type="marginal")$credit
querygrain(net, nodes=c("credit","default"), type="marginal")$credit
querygrain(net, nodes=c("credit","default"), type="joint")
p.goodCredit.loanDefault
gb <- c("good credit", "bad credit")
dn <- c("default", "no default")
c <- cptable(~credit, values=c(p.goodCredit, p.badCredit), levels=gb)
d <- cptable(~default|credit, values=c(p.goodCredit.loanDefault,
p.goodCredit.noLoanDefault,
p.badCredit.loanDefault,
p.badCredit.noLoanDefault), levels=dn)
net <- grain(compileCPT(list(c,d)))
net
querygrain(net, nodes="credit")
querygrain(net, nodes=c("credit", "default"))
querygrain(net, nodes=c("credit", "default"), type="joint")
p.goodCredit.loanDefault
p.goodCredit.loanDefault.node
p.goodCredit.noLoanDefault.node
querygrain(net, nodes=c("credit", "default"), type="joint")
plot(net)
plot(neta)
plot(net)
p.bus <- 1/3 #Probability of taking the bus
p.train <- 2/3 # probability of taking the train
p.bus.ontime <- 0.5 #probability of being on time if she takes the bus
p.bus.late <- 1-p.bus.ontime #probability of being late if she takes the bus
p.train.ontime <- 0.9 #probability of being on time if she takes the train
p.train.late <- 1-p.train.ontime #probability of being late if she takes the train
p.bus.ontime.node <- p.bus * p.bus.ontime
p.bus.late.node <- p.bus * p.bus.late
p.train.ontime.node <- p.train * p.train.ontime
p.train.late.node <- p.train * p.train.late
p.bus.given.ontime <- p.bus.ontime.node / (p.bus.ontime.node + p.train.ontime.node)
p.bus.given.ontime
library(gRain)
yn <- c("yes", "no")
lh <- c("low", "high")
d <- cptable(~difficulty, values=c(7,3), levels=yn)
i <- cptable(~intelligence, values=c(8,2), levels=lh)
g <- cptable(~grade|difficulty:intelligence, values=c(8,2,6,4,1,9,1,99), levels=lh)
s <- cptable(~SAT|intelligence, values=c(9,1,2,8), levels=lh)
l <- cptable(~letter|grade, values=c(9,1,5,95), levels=lh)
net1 <- grain(compileCPT(list(d,i,g,s,l)))
net11 <- setEvidence(net1, nodes="letter", state="high")
querygrain(net11, nodes="difficulty", type="marginal")
mean <- 40
sd <- 10
?rlnorm
rlnorm(10,m=40, s=10)
rlnorm(100,m=40, s=10)
x <- rlnorm(100,m=40, s=10)
sd(x)
x <- rlnorm(100,meanlog=40, sdlog=10)
sd(x)
x <- rlnorm(100,meanlog=40, sdlog=10)
x
plot(x)
library(ggplot2)
ggplot(x) + geom_hist()
ggplot(x, aes(x=x)) + geom_hist()
x <- rlnorm(100,meanlog=log(40), sdlog=10)
x
?rlnorm
x <- rlnorm(100,meanlog=0, sdlog=1)
x
x <- rlnorm(100,meanlog=10, sdlog=1)
x
x <- rlnorm(1000,meanlog=10, sdlog=1)
x
qplot(x)
x <- rlnorm(1000,meanlog=0, sdlog=1)
qplot(x)
mean(x)
1
x <- rlnorm(1000,meanlog=0, sdlog=1)
mean(x)
x <- rlnorm(1000,meanlog=0, sdlog=1)
mean(x)
x <- replicate(100,mean(rlnorm(1000,meanlog=, sdlog=1)))
x
qplot(x)
x <- replicate(1000,mean(rlnorm(1000,meanlog=, sdlog=1)))
qplot(x)
x <- replicate(10000,mean(rlnorm(1000,meanlog=, sdlog=1)))
qplot(x)
x <- replicate(10000,sd(rlnorm(1000,meanlog=, sdlog=1)))
qplot(x)
x <- replicate(10000,sd(rlnorm(1000,meanlog=, sdlog=1)))
qplot(x)
?rlnorm
?rnorm
?rlnorm
x <- rlnorm(1000,meanlog=10, sdlog=1)
x
mean(x)
log(mean(x))
x <- rlnorm(1000,meanlog=log(10), sdlog=1)
mean(x)
x <- rlnorm(1000,meanlog=log(10), sdlog=1)
mean(x)
x <- rlnorm(1000,meanlog=log(10), sdlog=1)
mean(x)
x <- rlnorm(1000,meanlog=exp(10), sdlog=1)
log(mean(x))
mean(x)
x <- rlnorm(1000,meanlog=10, sdlog=1)
mean(x)
log(mean(x))
x <- rlnorm(1000,meanlog=log(10), sdlog=1)
mean(x)
x <- replicate(10000,sd(rlnorm(1000,meanlog=log(10), sdlog=1)))
qplot(x)
x <- replicate(10000,mean(rlnorm(1000,meanlog=log(10), sdlog=1)))
qplot(x)
x <- rlnorm(1000,meanlog=ln(10), sdlog=1)
x <- rlnorm(1000,meanlog=log(10), sdlog=1)
x <- rlnorm(1000,mean=10, sd=10)
x <- replicate(10000,mean(rlnorm(1000,mean=10, sd=40)))
qplot(x)
x <- replicate(10000,mean(rlnorm(1000,mean=10, sd=1)))
qplot(x)
x <- replicate(10000,mean(rlnorm(1000,meanlog=0, sdlog=1)))
qplot(x)
qplot(log(x))
x <- rlnorm(1000,mean=40, sdlog=10)
mean(x)
x <- replicate(10000,mean(rlnorm(1000,mean=40, sd=10)))
qplot(x)
x <- rlnorm(1000,mean=40, sdlog=10)
mean(x)
log(mean(x))
x <- rlnorm(1000,mean=40, sdlog=10)
log(mean(x))
x <- rlnorm(1000,mean=40, sdlog=10)
log(mean(x))
?factorial
factorial(10)
k <- 1:10
k <- 5
factorial(10)/(factorial(5)*factorial(10-5))
p <- 0.3
q <- 1-p
dist <- (factorial(10)/(factorial(k)*factorial(10-k)))*(p^k)*(q^(10-k))
dist
k
k <- 1:10
dist <- (factorial(10)/(factorial(k)*factorial(10-k)))*(p^k)*(q^(10-k))
dist
sum(dist)
k
k <- 1:10
p <- 0.3
q <- 1-p
dist <- (factorial(10)/(factorial(k)*factorial(10-k)))*(p^k)*(q^(10-k))
sum(dist)
dist
k
k <- 0:10
k <- 0:10
dist <- (factorial(10)/(factorial(k)*factorial(10-k)))*(p^k)*(q^(10-k))
sum(dist)
dist*10000
runif()
runif(4)
runif(2345)
mean(runif(23345))
runif(10)<0.3
ifelse(runif(10)<0.3,1,0)
ifelse(runif(10)<0.3,1,0)
ifelse(runif(10)<0.3,1,0)
ifelse(runif(10)<0.3,1,0)
sampleBinomialYesNo <- function(n, p){
return(replicate(n,sum(ifelse(runif(n)<p,1,0))))
}
sampleBinomialYesNo(1000,0.3)
sampleBinomialYesNo <- function(n, p){
return(replicate(n,sum(ifelse(runif(10)<p,1,0))))
}
sampleBinomialYesNo(1000,0.3)
qplot(sampleBinomialYesNo(1000,0.3))
dist <- (factorial(10)/(factorial(k)*factorial(10-k)))*(p^k)*(q^(10-k))
qplot(dist)
dist
library(ggplot2)
ggplot(aes(x=0:10,y=dist)) + geom_bar()
ggplot(aes(x=0:10,y=dist))
ggplot(dist,aes(x=0:10,y=dist)) + geom_bar()
ggplot(dist,aes(x=as.factor(0:10),y=dist)) + geom_bar()
as.factor(0:10)
ggplot(dist,aes(x=as.character(0:10),y=dist)) + geom_bar()
as.character(0:10)
dist
ggplot(dist,aes(x=0:10,y=dist)) + geom_bar(stat="identity")
dist
ggplot(aes(x=0:10,y=dist)) + geom_bar(stat="identity")
dist <- as.data.frame()
dist <- as.data.frame(x=0:10,dist=dist)
View(dist)
0:10
View(dist)
dist <- as.data.frame("x"=0:10,"dist"=dist)
View(dist)
dist <- (factorial(10)/(factorial(k)*factorial(10-k)))*(p^k)*(q^(10-k))
dist <- as.data.frame("x"=0:10,"dist"=dist)
dist <- as.data.frame(numYes=0:10,dist=dist)
dist <- (factorial(10)/(factorial(k)*factorial(10-k)))*(p^k)*(q^(10-k))
dist <- as.data.frame(numYes=0:10,dist=dist)
dist <- (factorial(10)/(factorial(k)*factorial(10-k)))*(p^k)*(q^(10-k))
dist <- data.frame(x=0:10,dist=dist)
View(dist)
ggplot(dist,aes(x=x,y=dist)) + geom_bar(stat="identity")
qplot(sampleBinomialYesNo(1000,0.3))
ggplot(dist,aes(x=x,y=dist)) + geom_bar(stat="identity")
sampleBinomialYesNo(1000,0.3)
qplot(sampleBinomialYesNo(1000,0.3))
library(XML)
subways <- xmlParse("http://monkeyhomes.com/map/nyc.xml")
subways
subways <- xmlToList(xmlParse("http://monkeyhomes.com/map/nyc.xml"))
subways
subways$marker
length(subways)
subways[1]
subways[1]$lat
subways[1]["lat"]
subways[1]
typeof(subways[1])
subways[1]$lat
subways[1]$marker
subways[2]$marker
subways[1]$marker$lat
subways[1]$markert
subways[1]$marker
typeof(subways[1]$marker)
subways[1]$marker["lat"]
subdf <- data.frame()
subdf <- data.frame(lat=c(),lng=c(),substopid=c())
subdf <- data.frame(lat=c(1),lng=c(1),substopid=c(1))
for(subway in subways){
subdf$lat <- c(subdf$lat,subway$marker["lat"])
subdf$lng <- c(subdf$lng,subway$marker["lng"])
subdf$substopid <- c(subdf$substopid,subway$marker["substopid"])
}
subdf <- data.frame(lat=c(),lng=c(),substopid=c())
for(subway in subways){
subdf$lat <- c(subdf$lat,subway$marker["lat"])
subdf$lng <- c(subdf$lng,subway$marker["lng"])
subdf$substopid <- c(subdf$substopid,subway$marker["substopid"])
}
subway <- subways[1]
subway$marker["lat"]
as.numeric(subway$marker["lat"])
for(subway in subways){
subdf$lat <- c(subdf$lat,as.numeric(subway$marker["lat"]))
subdf$lng <- c(subdf$lng,as.numeric(subway$marker["lng"]))
subdf$substopid <- c(subdf$substopid,as.numeric(subway$marker["substopid"]))
}
subway["marker"]
subway[["marker"]]
?xmltolist
?xmlToList
subways <- xmlParse("http://monkeyhomes.com/map/nyc.xml")
subways
typeof(subways)
subways
subways <- xmlToDataFrame(xmlParse("http://monkeyhomes.com/map/nyc.xml"))
?getNodeSet
getNodSet(subways,markers)
getNodeSet(subways,"markers")
subways <- xmlToDataFrame(getNodeSet(xmlParse("http://monkeyhomes.com/map/nyc.xml"),"markers"))
subways
subways <- xmlToDataFrame(getNodeSet(xmlParse("http://monkeyhomes.com/map/nyc.xml"),"markers"))
subways <- xmlToList(xmlParse("http://monkeyhomes.com/map/nyc.xml"),"markers")
subways
subways$marker
subways[1]
subways[1][["lat"]]
subways[1]$marker["lat"]
subways[1][["marker"]]
for(subway in subways){
subdf$lat <- c(subdf$lat,as.numeric(subway[[marker]]["lat"]))
subdf$lng <- c(subdf$lng,as.numeric(subway[[marker]]["lng"]))
subdf$substopid <- c(subdf$substopid,as.numeric(subway[[marker]]["substopid"]))
}
for(subway in subways){
subdf$lat <- c(subdf$lat,as.numeric(subway[["marker"]]["lat"]))
subdf$lng <- c(subdf$lng,as.numeric(subway[["marker"]]["lng"]))
subdf$substopid <- c(subdf$substopid,as.numeric(subway[["marker"]]["substopid"]))
}
subway <- subways[1]
subway
subway[["marker"]]
subway[["marker"]]["lat"]
for(subway in subways){
subdf$lat <- c(subdf$lat,as.numeric(subway[["marker"]]["lat"]))
subdf$lng <- c(subdf$lng,as.numeric(subway[["marker"]]["lng"]))
subdf$substopid <- c(subdf$substopid,as.numeric(subway[["marker"]]["substopid"]))
}
library(XML)
xmlParse("http://monkeyhomes.com/map/nyc.xml")
subways <- xmlParse("http://monkeyhomes.com/map/nyc.xml")
xmltop <- xmlRoot(subways)
xmltop
class(xmltop)
xmlName(xmltop)
xmlSize(xmltop)
xmlName(xmltop)
xmltop[[1]]
xmlName(xmltop[[1]])
xmlSize(xmltop[[1]])
xmlAttrs(xmltop[[1]])
xmlAttrs(xmltop[[1]])["lat"]
subway <- xmltop[[1]]
subway
xmlAttrs(subway)
subdf <- data.frame(lat=c(),lng=c(),substopid=c())
for(subway in xmltop){
subdf$lat <- c(subdf$lat, xmlAttrs(subway)["lat"])
}
test <- c()
for(subway in xmltop){
test <- c(test, xmlAttrs(subway)["lat"])
}
xmltop
length(xmltop)
xmltop[[1]]
for(subway in xmltop){
print(subway)
}
xmlSize(xmltop)
xmlSApply(xmltop, xmlAttrs)
load("E:/Raw Data/Borough Taxi Data/tripdata.RData")
library(RPostgreSQL)
con <- dbConnect(RPostgreSQL::PostgreSQL(), user="postgres", password="is607",
dbname="borocabs")
con
dbWriteTable(con, "rides", rides, row.names=TRUE)
library(rtools)
library(RTools)
install.packages(c('openintro','OIdata','devtools','ggplot2','psych','reshape2',
'knitr','markdown'))
devtools::install_github("jbryer/IS606")
library("IS606")
getLabs()
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics ans Probability/Week 1")
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Week 1")
?getLabs
vignette('os3')
startLab('Lab0')
vignette('os3')
viewLab('Lab0')
startLab('Lab0')
vignette(package='IS606')
library("IS606")
vignette(package='IS606')
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Week 1")
