if(u2(p) < u1(p) - 200){
p[2] <- p[2]-1
p[1] <- p[1]+1
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
probmove <- (u1(p) - 200)/u2(p)
if(runif(1) < probmove){
p[2] <- p[2]-1
p[1] <- p[1]+1
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
}
print("location2")
}
print("moo")
return(pdata)
}
pdatastep <- function(pdata){
location <- sample(c(1,2),1)
p <- c(tail(pdata$p1,1),tail(pdata$p2,1))
if(location == 1){
if(u1(p) < u2(p) - 200){
p[1] <- p[1]-1
p[2] <- p[2]+1
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
probmove <- (u2(p) - 200)/u1(p)
if(runif(1) < probmove){
p[1] <- p[1]-1
p[2] <- p[2]+1
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
}
#print("location1")
}
if(location == 2){
if(u2(p) < u1(p) - 200){
p[2] <- p[2]-1
p[1] <- p[1]+1
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
probmove <- (u1(p) - 200)/u2(p)
if(runif(1) < probmove){
p[2] <- p[2]-1
p[1] <- p[1]+1
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
}
#print("location2")
}
#print("moo")
return(pdata)
}
pdata <- data.frame(p1 = 4000, p2 = 2000, u1 = u1(p0), u2 = u2(p0))
for(i in 1:100){
pdata <- pdatastep(pdata)
}
View(pdata)
sample(c(1,2),1)
sample(c(1,2),1)
sample(c(1,2),1)
sample(c(1,2),1)
sample(c(1,2),1)
sample(c(1,2),1)
sample(c(1,2),1)
sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
2 == sample(c(1,2),1)
pdata <- data.frame(p1 = 4000, p2 = 2000, u1 = u1(p0), u2 = u2(p0))
pdatastep <- function(pdata){
location <- sample(c(1,2),1)
p <- c(tail(pdata$p1,1),tail(pdata$p2,1))
if(location == 1){
if(u1(p) < u2(p) - 200){
p[1] <- p[1]-1
p[2] <- p[2]+1
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
probmove <- (u2(p) - 200)/u1(p)
if(runif(1) < probmove){
p[1] <- p[1]-1
p[2] <- p[2]+1
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
}
#print("location1")
}
if(location == 2){
if(u2(p) < u1(p) - 200){
p[2] <- p[2]-1
p[1] <- p[1]+1
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
probmove <- (u1(p) - 200)/u2(p)
if(runif(1) < probmove){
p[2] <- p[2]-1
p[1] <- p[1]+1
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
}
#print("location2")
}
#print("moo")
return(pdata)
}
for(i in 1:100){
pdata <- pdatastep(pdata)
}
View(pdata)
pdatastep <- function(pdata){
location <- sample(c(1,2),1)
p <- c(tail(pdata$p1,1),tail(pdata$p2,1))
if(location == 1){
if(u1(p) < u2(p) - 200){
p[1] <- p[1]-10
p[2] <- p[2]+10
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
probmove <- (u2(p) - 200)/u1(p)
if(runif(1) < probmove){
p[1] <- p[1]-10
p[2] <- p[2]+10
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
}
#print("location1")
}
if(location == 2){
if(u2(p) < u1(p) - 200){
p[2] <- p[2]-10
p[1] <- p[1]+10
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
probmove <- (u1(p) - 200)/u2(p)
if(runif(1) < probmove){
p[2] <- p[2]-10
p[1] <- p[1]+10
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
}
#print("location2")
}
#print("moo")
return(pdata)
}
p0 <- c(4000,2000)
pdata <- data.frame(p1 = 4000, p2 = 2000, u1 = u1(p0), u2 = u2(p0))
for(i in 1:100){
pdata <- pdatastep(pdata)
}
View(pdata)
pdata <- data.frame(p1 = 4000, p2 = 2000, u1 = u1(p0), u2 = u2(p0))
for(i in 1:10000){
pdata <- pdatastep(pdata)
}
View(pdata)
tail(pdata)
hist(p1)
hist(pdata$p1)
hist(pdata$p1,breaks=1000)
hist(pdata$p2,breaks=1000)
6000-10
pdatastep <- function(pdata){
location <- sample(c(1,2),1)
p <- c(tail(pdata$p1,1),tail(pdata$p2,1))
if(location == 1){
if(p[1] >= 10 && p[2] <= 5990){
if(u1(p) < u2(p) - 200){
p[1] <- p[1]-10
p[2] <- p[2]+10
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
probmove <- (u2(p) - 200)/u1(p)
if(runif(1) < probmove){
p[1] <- p[1]-10
p[2] <- p[2]+10
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
}
}else{
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
#print("location1")
}
if(location == 2){
if(p[2] >= 10 && p[1] <= 5990){
if(u2(p) < u1(p) - 200){
p[2] <- p[2]-10
p[1] <- p[1]+10
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
probmove <- (u1(p) - 200)/u2(p)
if(runif(1) < probmove){
p[2] <- p[2]-10
p[1] <- p[1]+10
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}else{
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
}
}else{
pdata <- rbind(pdata,c(p,u1(p),u2(p)))
}
#print("location2")
}
#print("moo")
return(pdata)
}
pdata <- data.frame(p1 = 4000, p2 = 2000, u1 = u1(p0), u2 = u2(p0))
for(i in 1:10000){
pdata <- pdatastep(pdata)
}
hist(pdata$p1,breaks=1000)
hist(pdata$p2,breaks=1000)
load("quandldata.RData")
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Final Project")
load("quandldata.RData")
plot.ts(bcusd)
plot.ts(gbpusd$rRate)
plot.ts(gbpusd)
plot.ts(gldusd)
plot.ts(ocusd)
plot.ts(bcusd)
typeof(bcusd)
library(Quandl)
typeof(bcusd)
bcusd
View(gbpusd)
View(bcusd)
bcdc <- Quandl("CRYPTOCHART/DOGE", authcode="1Cx13bkj4vDb7E13GLD6")
bcdc <- Quandl("CRYPTOCHART/DOGE", authcode="1Cx13bkj4vDb7E13GLD6", trim_start="2015-01-01", trim_end="2015-06-01")
hist(bcdc$Price)
length(bcdc$Price)
length(bcusd$Close)
?merge.zoo
bcdc.bcusd <- merge.zoo(bcdc,bcusd)
bcdc.bcusd
bcdc.bcusd["Price"]
bcdc.bcusd["Price"].values
rm(bcdc.bcusd)
bcdctest <- zoo(bcdc)
bcusdtest <- zoo(bcusd)
bcdc
bcdc.bcusd <- merge.zoo(bcdctest,bcusdtest)
bcdc.bcusd
bcdc.bcusd <- merge(bcdc,bcusd)
View(bcdc.bcusd)
View(bcusd)
bcdc.bcusd
usddc <- 1/(bcdc.bcusd$Price * bcdc.bcusd$Close)
usddc
usddc == Inf
usddc <- usddc[usddc != Inf]
pcusddc  <- ((tail(usddc,-1)-head(usddc,-1))/head(usddc,-1))*100
pcusddc
plot(pcusddc)
plot.ts(pcusddc)
View(gldusd)
View(gbpusd)
pcgbpusd <- ((tail(1/gbpusd$Rate,-1)-head(1/gbpusd$Rate,-1))/
head(1/gbpusd$Rate,-1))*100
plot.ts(pcgbpusd)
plot.ts(1/gbpusd$Rate)
rm(bcdctest,bcusdtest,invpcbusd,pccgbpusd)
rm(invpcbcusd)
rm(pcgbpusd)
rm(pcgldusd)
rm(pcusddc)
rm(usddc)
invpcgbpusd <- ((tail(1/gbpusd$Rate,-1)-head(1/gbpusd$Rate,-1))/
head(1/gbpusd$Rate,-1))*100
pcbcusd <- ((tail(bcusd$Close,-1)-head(bcusd$Close,-1))/
head(bcusd$Close,-1))*100
pcbcusd <- ((tail(bcusd$Close,-1)-head(bcusd$Close,-1))/
head(bcusd$Close,-1))*100
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/
head(gldusd$Value,-1))*100
dcusd <- (bcdc.bcusd$Price * bcdc.bcusd$Close)
pcdcusd  <- ((tail(usddc,-1)-head(usddc,-1))/head(usddc,-1))*100
pcdcusd  <- ((tail(dcusd,-1)-head(dcusd,-1))/head(dcusd,-1))*100
par(mfrow=c(2,2))
par(mfrow=c(1,1))
bcdc["Price"]
names(bcdc)
bcdc[names(bcdc) != "Volume"]
bcdc <- bcdc[names(bcdc) != "Volume"]
View(bcdc)
colnames(bcdc)
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Final Project")
load("quandldata.RData")
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Final Project")
load("quandldata.RData")
rm(invpcbcusd,pcgbpusd,pcgldusd,teststatgold,teststatpound)
save.image("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Final Project/quandldata.RData")
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Final Project")
load("quandldata.RData")
invpcgbpusd <- ((tail(1/gbpusd$Rate,-1)-head(1/gbpusd$Rate,-1))/
head(1/gbpusd$Rate,-1))*100
pcbcusd <- ((tail(bcusd$Close,-1)-head(bcusd$Close,-1))/
head(bcusd$Close,-1))*100
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/
head(gldusd$Value,-1))*100
bcdc.bcusd <- merge(bcdc,bcusd)
dcusd <- (bcdc.bcusd$Price * bcdc.bcusd$Close)
pcdcusd  <- ((tail(dcusd,-1)-head(dcusd,-1))/head(dcusd,-1))*100
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Final Project")
load("quandldata.RData")
invpcgbpusd <- ((tail(1/gbpusd$Rate,-1)-head(1/gbpusd$Rate,-1))/
head(1/gbpusd$Rate,-1))*100
pcbcusd <- ((tail(bcusd$Close,-1)-head(bcusd$Close,-1))/
head(bcusd$Close,-1))*100
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/
head(gldusd$Value,-1))*100
bcdc.bcusd <- merge(bcdc,bcusd)
bcdc <- Quandl("CRYPTOCHART/DOGE", authcode="1Cx13bkj4vDb7E13GLD6",
trim_start="2015-01-01", trim_end="2015-06-01")
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Final Project")
load("quandldata.RData")
save.image("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Final Project/quandldata.RData")
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Final Project")
load("quandldata.RData")
invpcgbpusd <- ((tail(1/gbpusd$Rate,-1)-head(1/gbpusd$Rate,-1))/
head(1/gbpusd$Rate,-1))*100
pcbcusd <- ((tail(bcusd$Close,-1)-head(bcusd$Close,-1))/
head(bcusd$Close,-1))*100
pcgldusd <- ((tail(gldusd$Value,-1)-head(gldusd$Value,-1))/
head(gldusd$Value,-1))*100
bcdc.bcusd <- merge(bcdc,bcusd)
dcusd <- (bcdc.bcusd$Price * bcdc.bcusd$Close)
pcdcusd  <- ((tail(dcusd,-1)-head(dcusd,-1))/head(dcusd,-1))*100
?plot.ts
plot.ts(gldusd)
plot.ts(gldusd$Value)
plot.ts(xts(gldusd$Value,gldusd$Year))
test <- xts(gldusd$Value,gldusd$Year)
View(test)
plot(test)
plot(gldusd$Value)
plot(xts(gldusd$Value,gldusd$Year))
plot(xts(bcusd$Close,bcusd$Date))
View(bcusd)
plot(xts(1/gbpusd$Rate,gbpusd$Date))
plot(xts(bcdc.bcusd$Price*bcdc.bcusd$Close,bcdc.bcusd$Date))
xts(bcdc.bcusd$Price*bcdc.bcusd$Close,bcdc.bcusd$Date)
par(mfrow=c(2,2))
plot(xts(gldusd$Value,gldusd$Year))
plot(xts(bcusd$Close,bcusd$Date))
plot(xts(1/gbpusd$Rate,gbpusd$Date))
plot(xts(bcdc.bcusd$Price*bcdc.bcusd$Close,bcdc.bcusd$Date))
?plot
par(mfrow=c(2,2))
plot(xts(gldusd$Value,gldusd$Year),main="Gold")
plot(xts(bcusd$Close,bcusd$Date),main="Bitcoin")
plot(xts(1/gbpusd$Rate,gbpusd$Date),main="British Pound")
plot(xts(bcdc.bcusd$Price*bcdc.bcusd$Close,bcdc.bcusd$Date),main="Dogecoin")
plot(xts(gldusd$Value,gldusd$Year),main="Gold")
par(mfrow=c(1,1))
plot(xts(gldusd$Value,gldusd$Year),main="Gold")
plot(xts(bcusd$Close,bcusd$Date),main="Bitcoin")
plot(xts(1/gbpusd$Rate,gbpusd$Date),main="British Pound")
plot(xts(bcdc.bcusd$Price*bcdc.bcusd$Close,bcdc.bcusd$Date),main="Dogecoin")
par(mfrow=c(2,2))
plot(xts(gldusd$Value,gldusd$Year),main="Gold")
plot(xts(bcusd$Close,bcusd$Date),main="Bitcoin")
plot(xts(1/gbpusd$Rate,gbpusd$Date),main="British Pound")
plot(xts(bcdc.bcusd$Price*bcdc.bcusd$Close,bcdc.bcusd$Date),main="Dogecoin")
par(mfrow=c(1,1))
dcusd
dcusd <- dcusd[dcusd!=0]
hist(invpcgbpusd,main="British POund")
hist(invpcgbpusd,main="British Pound",breaks=50)
par(mfrow=c(2,2))
hist(invpcgbpusd,main="British Pound",breaks=50)
hist(pcbcusd,main="Bitcoin",breaks=50)
hist(pcdcusd,main="Dogecoin",breaks=50)
hist(pcgldusd,main="Gold",breaks=50)
par(mfrow=c(1,1))
dcusd <- dcusd[dcusd!=0]
pcdcusd  <- ((tail(dcusd,-1)-head(dcusd,-1))/head(dcusd,-1))*100
par(mfrow=c(2,2))
hist(invpcgbpusd,main="British Pound",breaks=50)
hist(pcbcusd,main="Bitcoin",breaks=50)
hist(pcdcusd,main="Dogecoin",breaks=50)
hist(pcgldusd,main="Gold",breaks=50)
par(mfrow=c(1,1))
library(xts)
tmat <- matrix(nrow=4,ncol=4)
View(tmat)
combinedmeans <- c(mean(invpcgbpusd),mean(pcbcusd),mean(pcdcusd),mean(pcgldusd))
combinedsds <- c(sd(invpcgbpusd),sd(pcbcusd),sd(pcdcusd),sd(pcgldusd))
meandiffmat[1,] <- mean(invpcgbpusd) - combinedmeans
meandiffmat[2,] <- mean(pcbcusd) - combinedmeans
meandiffmat[3,] <- mean(pcdcusd) - combinedmeans
meandiffmat[4,] <- mean(pcgldusd) - combinedmeans
meandiffmat <- matrix(nrow=4,ncol=4)
meandiffmat[1,] <- mean(invpcgbpusd) - combinedmeans
meandiffmat[2,] <- mean(pcbcusd) - combinedmeans
meandiffmat[3,] <- mean(pcdcusd) - combinedmeans
meandiffmat[4,] <- mean(pcgldusd) - combinedmeans
combinedmeans <- c(mean(invpcgbpusd),mean(pcbcusd),mean(pcdcusd),mean(pcgldusd))
combinedses <- c(var(invpcgbpusd)/length(invpcgbpusd),
var(pcbcusd)/length(pcbcusd),
var(pcdcusd)/length(pcdcusd),
var(pcgldusd)/length(pcgldusd))
meandiffmat <- matrix(nrow=4,ncol=4)
meandiffmat[1,] <- mean(invpcgbpusd) - combinedmeans
meandiffmat[2,] <- mean(pcbcusd) - combinedmeans
meandiffmat[3,] <- mean(pcdcusd) - combinedmeans
meandiffmat[4,] <- mean(pcgldusd) - combinedmeans
sddiffmat <- matrix(nrow=4,ncol=4)
sddiffmat[1,] <- var(invpcgbpusd)/length(invpcgbpusd) + combinedses
sddiffmat[2,] <- var(pcbcusd)/length(pcbcusd) + combinedmses
sddiffmat[3,] <- var(pcdcusd)/length(pcdcusd) + combinedses
sddiffmat[4,] <- var(pcgldusd)/length(pcgldusd) + combinedses
sddiffmat <- matrix(nrow=4,ncol=4)
sddiffmat[1,] <- var(invpcgbpusd)/length(invpcgbpusd) + combinedses
sddiffmat[2,] <- var(pcbcusd)/length(pcbcusd) + combinedses
sddiffmat[3,] <- var(pcdcusd)/length(pcdcusd) + combinedses
sddiffmat[4,] <- var(pcgldusd)/length(pcgldusd) + combinedses
sdiffmat
sddiffmat
meandiffmat
tmat <- meandiffmat/sddiffmat
tmat
tmat
tmat
rownames(tmat) <- c("Pound", "Bitcoin", "Dogecoin", "Gold")
colnames(tmat) <- rownames(tmat)
tmat
combinedses
combinedses <- combinedvars/combinedns
combinedvars <- c(var(invpcgbpusd),var(pcbcusd),var(pcdcusd),var(pcgldusd))
combinedns <- c(length(invpcgbpusd),length(pcbcusd),length(pcdcusd),
length(pcgldusd))
combinedvars/combinedns
tmat
combinedns
smallestn <- matrix(nrow=4,ncol=4)
smallestn <- matrix(nrow=4,ncol=4)
for(i in 1:4){
for(j in 1:4){
smallestn[i,j] <- min(combinedns[i],combinedns[j])
}
}
smallestn
rownames(smallestn) <- rownames(tmat)
colnames(smallestn) <- colnames(tmat)
rownames(smallestn) <- rownames(tmat)
smallestn
pnorm(0.975)
qnorm(0.975)
qt(0.975,df=smallestn)
sign(-1)
sign(-4)
sign(tmat)
criticalt <- qt(0.975,df=smallestn)*sign(tmat)
criticalt
criticalt <- qt(0.975,df=smallestn)
criticalt
abs(tmat)
abs(tmat) > criticalt
ifelse(abs(tmat) > criticalt,"Reject","Accept")
tmat
pcdata <- data.frame(type = "British Pound", percent.change = invpcgbpusd)
pcdata <- rbind(pcdata, data.frame(type = "Bitcoin", percent.change = pcbcusd))
View(pcdata)
pcdata <- rbind(pcdata, data.frame(type = "Dogecoin", percent.change = pcdcusd))
pcdata <- data.frame(type = "British Pound", percent.change = invpcgbpusd)
pcdata <- rbind(pcdata, data.frame(type = "Bitcoin", percent.change = pcbcusd))
pcdata <- rbind(pcdata, data.frame(type = "Dogecoin", percent.change = pcdcusd))
pcdata <- rbind(pcdata, data.frame(type = "Gold", percent.change = pcgldusd))
ggplot(pcdata, aes(x = type, y = percent.change)) + geom_boxplot()
library(ggplot2)
ggplot(pcdata, aes(x = type, y = percent.change)) + geom_boxplot()
PlantGrowth
mod <- lm(percent.change ~ type, data=pcdata)
summary(mod)
anova(mod)
ifelse(abs(tmat) > criticalt,"Reject","Accept")
library(dplyr)
ggplot(filter(pcdata, type %in% c("Bitcoin", "Dogecoin"),
aes(x = type, y = percent.change))) + geom_boxplot()
pcdata
filter(pcdata, type %in% c("Bitcoin", "Dogecoin"))
ggplot(filter(pcdata, type %in% c("Bitcoin", "Dogecoin")),
aes(x = type, y = percent.change))) + geom_boxplot()
ggplot(filter(pcdata, type %in% c("Bitcoin", "Dogecoin")),
aes(x = type, y = percent.change)) + geom_boxplot()
bcusd
typeof(gldusd$Year)
gldusd$Year
gldusd$Year > "2015-01-05"
