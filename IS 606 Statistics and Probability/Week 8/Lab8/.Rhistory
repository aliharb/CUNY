highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, cost = highprob))
}
highestprob(c("C","A","B","D"))
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probs <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probs[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$cost > highestprob(maxletter)$prob){
maxletter <- letter
}
}
highestprob("A")
highestprob("A")
vec <- "A"
highprob <- 1
1:length(vec)
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
as.numeric(probs[vec[i],i])
i <- 1
probs[vec[i],i]
vec[1]
probs
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
probslist <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probs[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter)$prob){
maxletter <- letter
}
}
highestprob("A")
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
probslist <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter)$prob){
maxletter <- letter
}
}
probs
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
highestprob("A")
probslist <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter)$prob){
maxletter <- letter
}
}
maxletter
maxletter
highestprob(maxletter)
maxletter
oldmax <- maxletter
c(oldmax,"A")
highestprob(c("C","D"))
highestprob(c("C","D","B","A"))
highestprob(c("C","D","A","B"))
highestprob(c("D","C","A","A"))
highestprob(c("A","D","C","B"))
highestprob(c("A","D","B","C"))
probslist <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter)$prob){
maxletter <- letter
}
}
maxletter
highestprob(maxletter)
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
"AB"[2]
"AB"
"AB[1"
?subst
?substr
substr("AB",1,1)
substr("AB",2,1)
substr("AB",2,2)
substr("AB",2)
stringind <- function(stringthing,n){
return(substr(stringthing,n,n))
}
alpha
probslist <- list()
assignments <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist[letter] <- highprobobj$prob
assignments[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter)$prob){
maxletter <- letter
}
}
expand.grid(alpha,alpha)
choicelist <- expand.grid(alpha,alpha)
nrows(choicelist)
nrow(choicelist)
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
#
#veccost <- function(vec){
#  cost <- probs[vec[1],1]*probs[vec[2],2]*probs[vec[3],3]*probx[vec[4],4]
#  return(cost)
}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
#
#veccost <- function(vec){
#  cost <- probs[vec[1],1]*probs[vec[2],2]*probs[vec[3],3]*probx[vec[4],4]
#  return(cost)
#}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probslist1 <- list()
assignments1 <- matrix(nrow=4,ncol=4)
alpha1 <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter1 <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist1[letter] <- highprobobj$prob
assignments1[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter1)$prob){
maxletter1 <- letter
}
}
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
#
#veccost <- function(vec){
#  cost <- probs[vec[1],1]*probs[vec[2],2]*probs[vec[3],3]*probx[vec[4],4]
#  return(cost)
#}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probslist1 <- list()
assignments1 <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter1 <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist1[letter] <- highprobobj$prob
assignments1[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter1)$prob){
maxletter1 <- letter
}
}
maxletter1
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
#
#veccost <- function(vec){
#  cost <- probs[vec[1],1]*probs[vec[2],2]*probs[vec[3],3]*probx[vec[4],4]
#  return(cost)
#}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probslist1 <- list()
assignments1 <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments) <- alpha
maxletter1 <- "A"
probs <- matrix(c(0.9,0.7,0.85,0.75,
0.8,0.6,0.7,0.7,
0.9,0.8,0.85,0.75,
0.85,0.7,0.8,0.7),nrow=4)
rownames(probs) <- c("A","B","C","D")
isvalid <- function(vec){
return(length(unique(vec)) == 4)
}
#
#veccost <- function(vec){
#  cost <- probs[vec[1],1]*probs[vec[2],2]*probs[vec[3],3]*probx[vec[4],4]
#  return(cost)
#}
highestprob <- function(vec){
highprob <- 1
for(i in 1:length(vec)){
highprob <- highprob*as.numeric(probs[vec[i],i])
}
if(length(vec)<4){
maxindexlist <- vec
rowlist <- rownames(probs)[!(rownames(probs) %in% vec)]
for(i in (length(vec)+1):4){
maxindex <- names(which(probs[rowlist,i] == max(probs[rowlist,i])))[1]
highprob <- highprob*as.numeric(probs[maxindex,i])
maxindexlist <- c(maxindexlist,maxindex)
}
}else{
maxindexlist <- vec
}
return(list(assignments = maxindexlist, prob = highprob))
}
probslist1 <- list()
assignments1 <- matrix(nrow=4,ncol=4)
alpha <- c("A","B","C","D")
rownames(assignments1) <- alpha
maxletter1 <- "A"
for(letter in alpha){
highprobobj <- highestprob(letter)
probslist1[letter] <- highprobobj$prob
assignments1[letter,] <- highprobobj$assignments
if(highprobobj$prob > highestprob(maxletter1)$prob){
maxletter1 <- letter
}
}
maxletter1
highestprob(maxletter1)
row <- 1
choicelist[row,]
choicelist <- expand.grid(alpha,alpha)
choicelist[row,]
highestprob(choicelist[row,])
as.character(choicelist[row,])
choicelist
choicelist <- expand.grid(alpha,alpha,stringsAsFactors = FALSE)
highestprob(as.character(choicelist[row,]))
assignments2 <- matrix(nrow=16,ncol=4)
rownames(assignments2) <- paste(choicelist$Var1,choicelist$Var2,sep="")
assignments2
as.character(choicelist[row,])
list(16)
library(ggplot2)
temperature <- c(53,57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,
78,79,81)
damaged <- c(5,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0)
undamaged <- c(1,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)
data <- data.frame(temperature = temperature, damaged = damaged,
undamaged = undamaged)
ggplot(data,aes(x=temperature,y=damaged)) + geom_point()
challengermodel <- function(temp){
return(exp(11.663 - 0.2162*temp)/(1 + exp(11.663 - 0.2162*temp)))
}
challengermodel(51)
challengermodel(53)
challengermodel(55)
ggplot(data,aes(x=temperature,y=damaged)) + geom_point() + stat_smooth(method = 'glm', family = 'binomial')
temperature <- c(57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,
78,79,81)
damaged <- c(1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0)
undamaged <- c(5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)
data <- data.frame(temperature = temperature, damaged = damaged,
undamaged = undamaged)
ggplot(data,aes(x=temperature,y=damaged)) + geom_point() + stat_smooth(method = 'glm', family = 'binomial')
temperature <- c(53,53,53,53,53,57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,
75,75,76,76,78,79,81)
damaged <- c(1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0)
undamaged <- c(0,0,0,0,0,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)
data <- data.frame(temperature = temperature, damaged = damaged,
undamaged = undamaged)
ggplot(data,aes(x=temperature,y=damaged)) + geom_point() + stat_smooth(method = 'glm', family = 'binomial')
temperature <- c(53,53,53,53,53,57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,
75,75,76,76,78,79,81)
damaged <- c(1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0)
undamaged <- c(0,0,0,0,0,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)
data <- data.frame(temperature = temperature, damaged = damaged,
undamaged = undamaged)
ggplot(data,aes(x=temperature,y=damaged)) + geom_point() + stat_smooth(method = 'glm', family = 'binomial')
temperature <- c(53,57,58,63,66,67,67,67,68,69,70,70,70,70,72,73,75,75,76,76,
78,79,81)
damaged <- c(5,1,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0)
undamaged <- c(1,5,5,5,6,6,6,6,6,6,5,6,5,6,6,6,6,5,6,6,6,6,6)
ggplot(data,aes(x=temperature,y=damaged)) + geom_point()
load("more/evals.RData")
setwd("E:/Downloads/Courses/CUNY/SPS/Git/IS 606 Statistics and Probability/Week 8/Lab8/")
load("more/evals.RData")
View(evals)
library(ggplot2)
ggplot(evals,aes(x=score)) + geom_histogram()
install.packages("vcd")
library(vcd)
mosaic(~ ethnicity + gender, data=evals)
plot(evals$score ~ evals$bty_avg)
ggplot(evals,aes(x=bty_avg, y=score)) + geom_point(position = "jitter")
?l
?lm
m_bty <- lm(score ~ bty_avg, data=evals)
summary(m_bty)
ggplot(evals,aes(x=bty_avg, y=score)) + geom_point(position = "jitter") +
stat_smooth(method="lm")
m_bty$residuals
plot(m_bty$residuals)
ggplot(m_bty$residuals) + geom_histogram()
ggplot(aes(x=m_bty$residuals)) + geom_histogram()
m_bty$residuals
hist(m_bty$residuals)
ggplot(evals,aes(x=bty_avg, y=score)) + geom_point(position = "jitter") +
stat_smooth(method="lm")
plot(evals$bty_avg ~ evals$bty_f1lower)
cor(evals$bty_avg, evals$bty_f1lower)
plot(evals[,13:19])
m_bty_gen <- lm(score ~ bty_avg + gender, data = evals)
summary(m_bty_gen)
ggplot(evals,aes(x=gendermale,y=score)) + geom_point(position = "jitter")
ggplot(evals,aes(x=gender,y=score)) + geom_point(position = "jitter")
ggplot(evals,aes(x=gender,y=score)) + geom_boxplot()
hist(m_bty_gen$residuals)
summary(m_bty_gen)
summary(m_bty_gen)
summary(m_bty)
multiLines(m_bty_gen)
summary(m_bty_gen)
3.74734+0.17239
m_bty_rank <- lm(score ~ bty_avg + rank, data=evals)
summary(m_bty_rank)
levels(evals$rank)
m_full <- lm(score ~ rank + ethnicity + gender + language + age + cls_perc_eval
+ cls_students + cls_level + cls_profs + cls_credits + bty_avg
+ pic_outfit + pic_color, data = evals)
summary(m_full)
m_full_nosingle <- lm(score ~ rank + ethnicity + gender + language + age +
cls_perc_eval + cls_students + cls_level +
cls_credits + bty_avg + pic_outfit + pic_color,
data = evals)
summary(m_full_nosingle)
m_full_nosingle <- lm(score ~ rank + ethnicity + gender + language + age +
cls_perc_eval + cls_students +
cls_credits + bty_avg + pic_outfit + pic_color,
data = evals)
summary(m_full_nosingle)
View(evals)
m_full_nosingle <- lm(score ~ rank + ethnicity + gender + language + age +
cls_perc_eval + cls_students + cls_level +
cls_credits + bty_avg + pic_outfit + pic_color,
data = evals)
summary(m_full_nosingle)
hist(m_full_nosingle$residuals)
