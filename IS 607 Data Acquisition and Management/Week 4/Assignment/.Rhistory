vec <- c(1,2,5,NA,8)
vecMean(vec)
vecMean(vec)
vecMean <- function(vec){
#Takes in a vector and returns the mean of the observations, while handling NAs.
sum = 0
for(n in vec){
if(!is.na(n)){
sum = sum + n
}
}
return(sum/length(vec))
}
vecMean(vec)
5:1
4%%2
4%%3
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for n in y:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for n in y:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
} else {
for n in x:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for n in y:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}else{
for n in x:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for n in y:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}else{
for n in x:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for n in y:1{
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for(n in y:1){
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}else{
for n in x:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for(n in y:1){
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}else{
for(n in x:1){
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd(20, 30)
x <- 40
x <- 40
for(n in x:1){
if(n == 26){
break
}
}
y <- 30
x <- 40
y <- 30
for(n in x:1){
if(y%%n == 0 & x%%n == 0){
break
}
}
x <- 20
y <- 30
x < y
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for(n in y:1){
if(y%%n == 0 & x%%n == 0){
gcdval <- n
break
}
}
}else{
for(n in x:1){
if(y%%n == 0 & x%%n == 0){
gcdval <- n
break
}
}
}
return(gcdval)
}
gcd(20, 30)
47%%100
100%%47
gcd(20, 20)
gcd <- function(x,y){
if(x == y){
gcdval <- x
}else if(x > y){
gcd(x-y, y)
}else{
gcd(y-x, x)
}
}
gcd <- function(x,y){
if(x == y){
gcdval <- x
}else if(x > y){
gcd(x-y, y)
}else{
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
gcd <- function(x,y){
if(x == y){
gcdval <- x
}else if(x > y){
gcd(x-y, y)
}else{
gcd(y-x, x)
}
return(gcdval)
}
gcd <- function(x,y){
if(x == y){
gcdval <- x
}else if(x > y){
gcd(x-y, y)
}else{
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
print("Hello")
gcd <- function(x,y){
if(x == y){
print(x, y)
gcdval <- x
}else if(x > y){
print(x, y)
gcd(x-y, y)
}else{
print(x, y)
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
x <- 252
y<-105
print(x, y)
print(x & y)
print(x)
print(c(x, y))
gcd <- function(x,y){
if(x == y){
print(c(x,y))
gcdval <- x
}else if(x > y){
print(c(x,y))
gcd(x-y, y)
}else{
print(c(x,y))
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
x <- 21
y<-21
if(x==y){
gcdval <- x
}
gcd <- function(x,y){
if(x == y){
print(c(x,y))
gcdval <- x
}else if(x > y){
print(c(x,y))
gcd(x-y, y)
}else{
print(c(x,y))
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
gcd <- function(x,y){
if(x == y){
gcdval <- x
}else if(x > y){
gcd(x-y, y)
}else{
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
x <- 2
y <- 3
x^2*y
formulacalc <- function(x,y){
return(x^2*y + 2*x*y - x*y^2)
}
formulacalc(23,45)
x <- 23^2
x <- x*45
y <- 2*23*45
z <- 45^2
z <- z*23
x+y-z
TestDatabankListMyInsight <- function(dblist, sourcefile, pricecolumnname, title){
sourcedf = read.csv(sourcefile, header = TRUE)
dbdf = read.csv(dblist, header = TRUE)
#list <- data.frame()
list <- data.frame(Service = factor(0,levels=unique(sourcedf$Service)), Title = factor(0, levels=unique(sourcedf$Title)))
#Why is this for loop working but newTestDatabankList isn't?
#for(service in unique(sourcedf$Service)){
#  for(bnk in unique(sourcedf[sourcedf$Service == service,title])){
#    if(!(bnk == "")){
#      if(!(bnk %in% dbdf$Title)){
#        list <- rbind(list, c(service,bnk))
#      }else{
#        if(is.na(dbdf[dbdf$Title == bnk, pricecolumnname])){
#          list <- rbind(list, c(service,bnk))
#        }
#      }
#    }
#  }
#}
for(service in unique(sourcedf$Service)){
if(!(service == "")){
for(bnk in unique(sourcedf[sourcedf$Service == service,title])){
if(!(bnk == "")){
if(!(bnk %in% dbdf[dbdf$Service == service,title])){
list <- rbind(list, c(service,bnk))
}else{
if(dbdf[(dbdf$Title == bnk & dbdf$Service == service), pricecolumnname] == ""){
list <- rbind(list, c(service,bnk))
}
}
}
}
}
}
return(list)
}
TestDatabankListConnect <- function(dblist, sourcefile, pricecolumnname, title){
sourcedf = read.csv(sourcefile, header = TRUE)
dbdf = read.csv(dblist, header = TRUE)
list <- data.frame(Title = factor(0, levels=unique(sourcedf[,title])))
for(bnk in unique(sourcedf[,title])){
if(!(bnk == "")){
if(!(bnk %in% dbdf[,title])){
list <- rbind(list, bnk)
}else{
if(dbdf[dbdf[,title] == bnk, pricecolumnname] == ""){
list<- rbind(list, bnk)
}
}
}
}
return(list)
}
applyPrices <- function(df, pricecolumn, monthlyFlatFee){
Total.Cost <- df$Downloads*df[,pricecolumn]
RetailSum <- sum(Total.Cost)
Discount.Factor <- monthlyFlatFee / RetailSum
Discounted.Value <- df$Downloads*df[,pricecolumn]*Discount.Factor
df <- cbind(df, Total.Cost, Discounted.Value)
return(df)
}
library(ggplot2)
library(ggthemes)
library(GGally)
library(plyr)
workingDirectory <- "C:/Users/Charley/Downloads/Courses/CUNY/SPS/git/IS 607 Data Acquisition and Management/Week 4/Assignment"
setwd(workingDirectory)
m <- read.table("movies.tab", sep="\t", header=TRUE, quote="", comment="")
library(ggplot2)
library(ggthemes)
library(GGally)
library(plyr)
workingDirectory <- "C:/Users/Charley/Downloads/Courses/CUNY/SPS/git/IS 607 Data Acquisition and Management/Week 4/Assignment"
setwd(workingDirectory)
m <- read.table("movies.tab", sep="\t", header=TRUE, quote="", comment="")
?aggregate
mYear <- aggregate(m, by=year, FUN=mean)
mYear <- aggregate(m, by="year", FUN=mean)
mYear <- aggregate(m, by=list(m$year), FUN=mean)
View(mYear)
mYear <- aggregate(m$title, by=list(m$year), FUN=mean)
View(mYear)
mYear <- aggregate(m$rating, by=list(m$year), FUN=mean)
View(mYear)
colnames(mYear) <- c("year", "rating")
View(mYear)
qplot(mYear$rating)
ggplot(m, aes(x=year)) + geom_hist()
ggplot(m, aes(x=year)) + geom_histogram(binwidth=1)
ggplot(m, aes(x=year, y=rating)) + geom_point()
mYear <- aggregate(year ~ rating, data=m, FUN=mean)
View(mYear)
mYear <- aggregate(year ~ rating, data=m, FUN=each(mean, count))
View(mYear)
mYear <- aggregate(year ~ rating, data=m, FUN=mean)
View(mYear)
mYear <- aggregate(title ~ year, data=m, FUN=mean)
View(mYear)
mYear <- aggregate(rating ~ year, data=m, FUN=mean)
View(mYear)
mYear <- aggregate(rating ~ year, data=m, FUN=each(mean, count))
View(mYear)
mYear <- aggregate(rating ~ year, data=m, FUN=count)
View(mYear)
?count
?aggregate
mYear <- aggregate(rating ~ year, data=m, FUN=count)
mYear <- ddply(m, .variables = "year", .fun = count)
View(mYear)
mYear <- ddply(m, .variables = "year", .fun = length)
View(mYear)
mYear <- ddply(m, .variables = "year", .fun = count)
mYear <- aggregate(rating ~ year, data=m, FUN=countMovies)
countMovies <- function(data){
c(movies = length(data$movies))
}
mYear <- aggregate(rating ~ year, data=m, FUN=countMovies)
countMovies <- function(data){
c(movies = length(data$rating))
}
mYear <- aggregate(rating ~ year, data=m, FUN=countMovie)
countMovies <- function(data){
c(movies = with(data, length(rating)))
}
mYear <- aggregate(rating ~ year, data=m, FUN=countMovie)
countMovies <- function(data){
c(movies = with(data, length(rating)))
}
mYear <- aggregate(rating ~ year, data=m, FUN=countMovies)
View(m)
with(m, length(rating))
mYear <- ddply(m, .variables = "year", .fun = countMovies)
View(mYear)
countMovies <- function(data){
c(movies = length(data$rating))
}
mYear <- ddply(m, .variables = "year", .fun = countMovies)
View(mYear)
mYearCount <- ddply(m, .variables = "year", .fun = countMovies)
rm(mYear)
mRatingAverage <- ddply(m, .variables = "year", .fun = mean)
mYear <- merge(mYearCount, mRatingAverage, by="year")
View(mYear)
colnames(mRatingAverage)
colnames(mRatingAverage) <- c("year" ,"rating")
mYear <- merge(mYearCount, mRatingAverage, by="year")
View(mYear)
View(mYearCount)
View(mRatingAverage)
mRatingAverage <- ddply(m, .variables = "year", .fun = mean)
warnings()
meanRatings <- function(data){
c(rating = mean(data$rating))
}
mRatingAverage <- ddply(m, .variables = "year", .fun = meanRatings)
View(mRatingAverage)
ggplot(mYear, aes(x=movies, y=rating)) + geom_point()
ggplot(mYear, aes(x=movies, y=rating)) + geom_point()
ggplot(mYear, aes(x=movies, y=rating)) + geom_point()
View(mYear)
View(mRatingAverage)
identical(mYearCount$year, mRatingAverage$year)
mYear <- merge(mYearCount, mRatingAverage, by=year)
mYear <- merge(mYearCount, mRatingAverage, by="year")
View(mYear)
ggplot(mYear, aes(x=movies, y=rating)) + geom_point()
stat_smooth(method=lm)
ggplot(mYear, aes(x=movies, y=rating)) + geom_point() +
stat_smooth(method=lm)
cor.test(data=mYear, movies, rating)
cor.test(mYear$movies, mYear$rating)
mRatingSDCount <- ddply(mYear, .variables = "movies", .fun = sd)
counts <- 1:max(mYear$movies)
sds <- sd(m[mYear$movies < counts,"rating"])
counts <- 3:max(mYear$movies)
sds <- sd(m[mYear$movies < counts,"rating"])
counts <- 20:max(mYear$movies)
sds <- sd(m[mYear$movies < counts,"rating"])
mYear(order(mYear$rating,))
mYear[order(mYear$rating),0]
mYear <- mYear[order(mYear$rating),0]
View(mYear)
mYearCount <- ddply(m, .variables = "year", .fun = countMovies)
mRatingAverage <- ddply(m, .variables = "year", .fun = meanRatings)
mYear <- merge(mYearCount, mRatingAverage, by="year")
mYear <- mYear[order(mYear$rating),]
View(mYear)
?order
?order()
mYear <- mYear[order(mYear$rating, decreasing = T),]
View(mYear)
ggplot(mYear, aes(x=movies, y=rating)) + geom_point() +
stat_smooth(method=lm)
cor.test(mYear$movies, mYear$rating)
ggplot(mYear[mYear$movies < 250,], aes(x=movies, y=rating)) +
geom_point() +
stat_smooth(method=lm)
ggplot(mYear[mYear$movies < 75,], aes(x=movies, y=rating)) +
geom_point() +
stat_smooth(method=lm)
ggplot(mYear, aes(x=movies, y=rating)) +
geom_point() +
stat_smooth(method=lm)
ggplot(mYear[mYear$movies < 750,], aes(x=movies, y=rating)) +
geom_point() +
stat_smooth(method=lm)
ggplot(mYear[mYear$movies < 150,], aes(x=movies, y=rating)) +
geom_point() +
stat_smooth(method=lm)
ggplot(mYear, aes(x=movies, y=rating)) +
geom_point() +
stat_smooth(method=lm)
mYear[order(mYear$rating, decreasing=T),1]
mYear[order(mYear$rating, decreasing=T),]
mYear[order(mYear$rating, decreasing=T),][1,]
mYear[mYear$movies > 1500,][order(mYear$rating, decreasing=T),][1,]
ggplot(mYear, aes(x=year, y=movie)) + geom_line()
ggplot(mYear, aes(x=year, y=movie)) + geom_histogram()
ggplot(mYear, aes(x=year, y=rating)) + geom_line()
ggplot(mYear, aes(x=movies, y=rating, color=movies)) +
geom_point() +
stat_smooth(method=lm)
ggplot(mYear, aes(x=year, y=rating, color=movies)) + geom_line()
