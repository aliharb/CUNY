for(n in 1:1000){
if(n%%7 != 0 | n%%3 != 0 | n%%11 != 0){
count <- count + 1
vec <- c(vec, n)
}
}
vec
1%%3
count <- 0
vec <- c()
for(n in 1:1000){
if(n%%7 != 0 & n%%3 != 0 & n%%11 != 0){
count <- count + 1
vec <- c(vec, n)
}
}
vec
pythag <- function(f,g,h){
#This function takes in three numbers: f, g, and h.
#It returns TRUE if the numbers form a pythagorean triple, and FALSE if they don't.
if(f^2+g^2==h^2 | f^2+h^2==g^2 | g^2+h^2==f^2){
return(TRUE)
} else {
return(FALSE)
}
}
pythag(3,4,5)
pythag(4,4,5)
pythag(12,13,5)
pythag <- function(f,g,h){
#This function takes in three numbers: f, g, and h.
#It returns TRUE if the numbers form a pythagorean triple, and FALSE if they don't.
if(f^2+g^2==h^2 | f^2+h^2==g^2 | g^2+h^2==f^2){
return(TRUE)
} else {
return(FALSE)
}
}
queue <- c("James", "Mary", "Steve", "Alex", "Patricia")
##### Part b #####
queue <- c(queue, "Harold")
##### Part c #####
queue <- queue[queue != "James"]
##### Part d #####
queue <- append(queue, "Pam", after = 1)
##### Part e #####
queue <- queue[queue != "Harold"]
##### Part f #####
queue <- queue[queue != "Alex"]
##### Part g #####
Patricia.Position <- match("Patricia", queue)
queue <- c("James", "Mary", "Steve", "Alex", "Patricia")
##### Part b #####
queue <- c(queue, "Harold")
##### Part c #####
queue <- queue[queue != "James"]
##### Part d #####
queue <- append(queue, "Pam", after = 1)
##### Part e #####
queue <- queue[queue != "Harold"]
##### Part f #####
queue <- queue[queue != "Alex"]
##### Part g #####
Patricia.Position <- match("Patricia", queue)
##### Part h #####
Queue.Length <- length(queue)
vec <- c(1,2,3,4,5)
mean(vec)
vec <- c(1,2,3,NA,5)
mean(vec)
vec <- c(1,2,3,4,5)
vecMean <- function(vec){
#Takes in a vector and returns the mean.
return(mean(vec))
}
vecMean(vec)
vec <- c(1,2,null,4)
vec <- c(1,2,NULL,4)
vec
vec <- c(1,2,NA,4,5)
is.na(vec[3])
vec[vec != NA]
vec[vec != 2]
vec[vec != NA]
length(vec)
vec[0]
length(vec)
1:length(vec)
vec[!vec == NA]
vec[vec == NA]
vec <- 1:5
count = 0
for(n in vec){
count = count + n
}
isna(NA)
vecMean <- function(vec){
#Takes in a vector and returns the mean of the observations, while handling NAs.
sum = 0
for(n in vec){
if(!is.na(n)){
sum = sum + n
}
}
}
vec <- c(1,2,5,NA,8)
vecMean(vec)
vecMean(vec)
vecMean <- function(vec){
#Takes in a vector and returns the mean of the observations, while handling NAs.
sum = 0
for(n in vec){
if(!is.na(n)){
sum = sum + n
}
}
return(sum/length(vec))
}
vecMean(vec)
5:1
4%%2
4%%3
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for n in y:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for n in y:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
} else {
for n in x:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for n in y:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}else{
for n in x:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for n in y:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}else{
for n in x:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for n in y:1{
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for(n in y:1){
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}else{
for n in x:1{
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for(n in y:1){
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}else{
for(n in x:1){
if(y%%n == 0 & x%%n == 0){
gcd <- n
break
}
}
}
return(gcdval)
}
gcd(20, 30)
x <- 40
x <- 40
for(n in x:1){
if(n == 26){
break
}
}
y <- 30
x <- 40
y <- 30
for(n in x:1){
if(y%%n == 0 & x%%n == 0){
break
}
}
x <- 20
y <- 30
x < y
gcd <- function(x,y){
gcdval <- 1
if(x < y){
for(n in y:1){
if(y%%n == 0 & x%%n == 0){
gcdval <- n
break
}
}
}else{
for(n in x:1){
if(y%%n == 0 & x%%n == 0){
gcdval <- n
break
}
}
}
return(gcdval)
}
gcd(20, 30)
47%%100
100%%47
gcd(20, 20)
gcd <- function(x,y){
if(x == y){
gcdval <- x
}else if(x > y){
gcd(x-y, y)
}else{
gcd(y-x, x)
}
}
gcd <- function(x,y){
if(x == y){
gcdval <- x
}else if(x > y){
gcd(x-y, y)
}else{
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
gcd <- function(x,y){
if(x == y){
gcdval <- x
}else if(x > y){
gcd(x-y, y)
}else{
gcd(y-x, x)
}
return(gcdval)
}
gcd <- function(x,y){
if(x == y){
gcdval <- x
}else if(x > y){
gcd(x-y, y)
}else{
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
print("Hello")
gcd <- function(x,y){
if(x == y){
print(x, y)
gcdval <- x
}else if(x > y){
print(x, y)
gcd(x-y, y)
}else{
print(x, y)
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
x <- 252
y<-105
print(x, y)
print(x & y)
print(x)
print(c(x, y))
gcd <- function(x,y){
if(x == y){
print(c(x,y))
gcdval <- x
}else if(x > y){
print(c(x,y))
gcd(x-y, y)
}else{
print(c(x,y))
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
x <- 21
y<-21
if(x==y){
gcdval <- x
}
gcd <- function(x,y){
if(x == y){
print(c(x,y))
gcdval <- x
}else if(x > y){
print(c(x,y))
gcd(x-y, y)
}else{
print(c(x,y))
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
gcd <- function(x,y){
if(x == y){
gcdval <- x
}else if(x > y){
gcd(x-y, y)
}else{
gcd(y-x, x)
}
return(gcdval)
}
gcd(252, 105)
x <- 2
y <- 3
x^2*y
formulacalc <- function(x,y){
return(x^2*y + 2*x*y - x*y^2)
}
formulacalc(23,45)
x <- 23^2
x <- x*45
y <- 2*23*45
z <- 45^2
z <- z*23
x+y-z
TestDatabankListMyInsight <- function(dblist, sourcefile, pricecolumnname, title){
sourcedf = read.csv(sourcefile, header = TRUE)
dbdf = read.csv(dblist, header = TRUE)
#list <- data.frame()
list <- data.frame(Service = factor(0,levels=unique(sourcedf$Service)), Title = factor(0, levels=unique(sourcedf$Title)))
#Why is this for loop working but newTestDatabankList isn't?
#for(service in unique(sourcedf$Service)){
#  for(bnk in unique(sourcedf[sourcedf$Service == service,title])){
#    if(!(bnk == "")){
#      if(!(bnk %in% dbdf$Title)){
#        list <- rbind(list, c(service,bnk))
#      }else{
#        if(is.na(dbdf[dbdf$Title == bnk, pricecolumnname])){
#          list <- rbind(list, c(service,bnk))
#        }
#      }
#    }
#  }
#}
for(service in unique(sourcedf$Service)){
if(!(service == "")){
for(bnk in unique(sourcedf[sourcedf$Service == service,title])){
if(!(bnk == "")){
if(!(bnk %in% dbdf[dbdf$Service == service,title])){
list <- rbind(list, c(service,bnk))
}else{
if(dbdf[(dbdf$Title == bnk & dbdf$Service == service), pricecolumnname] == ""){
list <- rbind(list, c(service,bnk))
}
}
}
}
}
}
return(list)
}
TestDatabankListConnect <- function(dblist, sourcefile, pricecolumnname, title){
sourcedf = read.csv(sourcefile, header = TRUE)
dbdf = read.csv(dblist, header = TRUE)
list <- data.frame(Title = factor(0, levels=unique(sourcedf[,title])))
for(bnk in unique(sourcedf[,title])){
if(!(bnk == "")){
if(!(bnk %in% dbdf[,title])){
list <- rbind(list, bnk)
}else{
if(dbdf[dbdf[,title] == bnk, pricecolumnname] == ""){
list<- rbind(list, bnk)
}
}
}
}
return(list)
}
applyPrices <- function(df, pricecolumn, monthlyFlatFee){
Total.Cost <- df$Downloads*df[,pricecolumn]
RetailSum <- sum(Total.Cost)
Discount.Factor <- monthlyFlatFee / RetailSum
Discounted.Value <- df$Downloads*df[,pricecolumn]*Discount.Factor
df <- cbind(df, Total.Cost, Discounted.Value)
return(df)
}
baseb <- baseball
baseb$sf[baseball$year < 1954] <- 0
require(plyr)
head(baseball)
baseb <- baseball
baseb$sf[baseball$year < 1954] <- 0
any(is.na(baseb$sf))
baseb$hbp[is.na(baseb$hbp)] <- 0
any(is.na(baseb$hbp))
baseb <- baseb[baseb$ab >= 50,]
baseb$OBP <- with(baseb, (h + bb + hbp)/(ab + bb + hbp + sf))
obp <- function(data){
c(OBP = with(data, sum(h + bb + hbp)/sum(ab + bb + hbp + sf)))
}
careerOBP <- ddply(baseb, .variables = "id", .fun = obp)
View(careerOBP)
workingDirectory <- "C:/Users/Charley/Downloads/Courses/CUNY/SPS/git/IS 607 Data Acquisition and Management/Week 4/Meetup Materials"
setwd(workingDirectory)
jury.data <- read.csv(file="partida-jury-info.csv",header=T)
library(reshape2)
View(jury.data)
theList <- list(A = matrix(1:9,3), B = 1:5, C = matrix(1:4,2), D = 2)
lappply(theList, sum)
require(plyr)
lappply(theList, sum)
lapply(theList, sum)
llply(theList, sum)
baseb <- baseball
baseb$sf[baseball$year < 1954] <- 0
any(is.na(baseb$sf))
baseb$hbp[is.na(baseb$hbp)] <- 0
any(is.na(baseb$hbp))
baseb <- baseb[baseb$ab >= 50,]
baseb$OBP <- with(baseb, (h + bb + hbp)/(ab + bb + hbp + sf))
tail(baseb)
obp <- function(data){
c(OBP = with(data, sum(h + bb + hbp)/sum(ab + bb + hbp + sf)))
}
baseb2 <- baseb
View(baseb2)
baseb2 <- baseb[order(baseb$id),]
View(baseb2)
baseb2 <- baseb[baseb$id == "aaronha01",]
View(baseb2)
obp(baseb2)
obp2 <- function(data){
OBP = with(data, sum(h + bb + hbp)/sum(ab + bb + hbp + sf))
return(OBP)
}
obp2(baseb)
obp2(baseb2)
careerOBP <- ddply(baseb, .variables = "id", .fun = obp)
careerOBP2 <- ddply(baseb, .variables = "id", .fun = obp2)
?is.identical
identical(careerOBP, careerOBP2)
View(careerOBP)
View(careerOBP2)
