cocktailList <- theSource %>%
html_nodes("ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .id div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .class div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_text()
html_nodes("#Absinthe .class li a") %>%
cocktailList <- theSource %>%
html_nodes("#Absinthe .class") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .class span") %>%
html_text()
vignette("selectorgadget")
cocktailList <- theSource %>%
html_text()
html_nodes("#Absinthe .div-col ul li a") %>%
cocktailList <- theSource %>%
html_nodes("#Absinthe ul li a") %>%
html_text()
html_nodes("div ul li a") %>%
cocktailList <- theSource %>%
html_nodes("div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("h2 div div ul li a") %>%
html_text()
html_nodes("div div ul li a") %>%
cocktailList <- theSource %>%
html_nodes("div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("div div ul li a") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("#Absinthe") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("#corpse #reviver") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#corpse") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".Absinthe div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .div-col div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".div-col div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .id") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".(div-col columns column-count column-count-2)") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".div-col columns column-count column-count-2") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".div-col") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes(".div-col ul li a") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("#Absinthe .div-col ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".div-col ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".div-col .columns ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".columns ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".column-count-2 ul li a") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes(".Absinthe ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".column-count-2 .boilerplate ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".boilerplate ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".column-count-2 ul li a") %>%
html_text()
cocktailList
cocktailList <- cocktailList[cocktailList != "IBA"]
cocktailList
cocktailList <- theSource %>%
html_notes("dl~ ul a , .tright+ ul a , h4+ ul a , .column-count-3 li > a , .seealso+ ul a , .column-count-2 li > a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("dl~ ul a , .tright+ ul a , h4+ ul a , .column-count-3 li > a , .seealso+ ul a , .column-count-2 li > a") %>%
html_text()
cocktailList
cocktailList <- cocktailList[cocktailList != "IBA"]
vignette("selectorgadget")
?selectorgadget
cocktailList <- theSource %>%
html_nodes("p+ ul b , dd b , .thumb+ ul b , h3+ ul b , .seealso+ ul a b , h2+ ul a:nth-child(1) b") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("p+ ul b , dd b , .thumb+ ul b , h3+ ul b , .seealso+ ul a b , h2+ ul a:nth-child(1) b") %>%
html_text()
theURL <-"http://en.wikipedia.org/wiki/List_of_paradoxes"
theSource <- html(theURL)
cocktailList <- theSource %>%
html_nodes("p+ ul b , dd b , .thumb+ ul b , h3+ ul b , .seealso+ ul a b , h2+ ul a:nth-child(1) b") %>%
html_text()
cocktailList
library(rvest)
theURL <-"http://en.wikipedia.org/wiki/List_of_paradoxes"
theSource <- html(theURL)
paradoxList <- theSource %>%
html_nodes("p+ ul b , dd b , .thumb+ ul b , h3+ ul b , .seealso+ ul a b , h2+ ul a:nth-child(1) b") %>%
html_text()
paradoxList
install.packages("rmongodb")
library(rmongodb)
?rmongodb
?mongo.create
mongo.create(db = "unitedstates")
mongo.find()
mdb <- mongo.create(db = "unitedstates")
mongo.find(mdb)
mongo.find(mdb, "geos")
mongo.find(mdb, "geos", fields="state")
?mongo.find
mongo.find(mdb, "geos", query={state: "Kansas"})
mongo.find(mdb, "geos", query={"state": "Kansas"})
cursor <- mongo.find(mongo, "geos")
mongo <- mongo.create(db = "unitedstates")
library(rmongodb)
mongo <- mongo.create(db = "unitedstates")
cursor <- mongo.find(mongo, "geos")
while(mongo.cursor.next(cursor)){
print(mongo.cursor.value(cursor))
}
buf <- mongo.bson.buffer.create()
query <- mongo.bson.from.buffer(buf)
cursor <- mongo.find(mongo, "geos", query)
while(mongo.cursor.next(cursor)){
print(mongo.cursor.value(cursor))
}
mongo.cursor.destroy(cursor)
mongo <- mongo.create(db = "unitedstates")
mongo.is.connected(mongo)
mongo.get.databases(mongo)
mongo.get.database.collections(mongo, "unitedstates")
library(rmongodb)
mongo <- mongo.create(db = "unitedstates")
mongo.get.databases(mongo)
mongo.get.database.collections(mongo, "unitedstates")
coll <- "unitedstates.geos"
mongo.count(mongo, coll)
mongo.find.one(mongo, coll)
mongo.find.one(mongo, coll)
mongo.find.one(mongo, coll, "{\"state\":\"Alabama\"}")
mongo.find.one(mongo, coll, "{\"state\":\"Colorado\"}")
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(bug, "state", "Colorado")
mongo.bson.buffer.append(buf, "state", "Colorado")
query <- mongo.bson.from.buffer(buf)
query
mongo.bson.from.JSON("{\"state\":\"Colorado\"}")
buf
mongo.bson.from.JSON("{\"state\":\"Colorado\"}")
query <- mongo.bson.from.buffer(buf)
query
mongo.bson.from.JSON("{\"state\":\"Colorado\"}")
library(jsonlite)
json <- "{\"population\":{\"$lte\":1000000}}"
cat(prettify(json))
prettify(json)
validate(json)
pops <- mongo.find.all(mongo, coll, json)
json <- "{\"population\":{\"$gte\":1000000}}"
cat(prettify(json))
validate(json)
pops <- mongo.find.all(mongo, coll, json)
print(dim(pops))
?dim
head(pops)
mongo.cursor.to.data.frame
pops[1]
pops[1,1]
type.of(pops)
typeof(pops)
pops[1]
pops[[1]]
pops[[1]][[1]]
pops[[1]][[1]][[1]]
pops[[1]]
typeof(pops[[1]])
pops
head(pops)
pops[[1]]
mongo.find.one(mongo, coll, "{\"state\":\"Colorado\"}")
mongo.find(mongo, coll, "{\"state\":\"Colorado\"}")
mongo.find.one(mongo, coll, "{\"state\":\"Colorado\"}")
mongo.bson.to.list
mongo.bson.to.list(mongo.find.one(mongo, coll, "{\"state\":\"Colorado\"}"))
coloradofind <- mongo.find.one(mongo, coll, "{\"state\":\"Colorado\"}")
mongo.bson.to.list(coloradofind)
pops <- mongo.find.all(mongo, coll, "{\"population\":{\"$gte\":1000000}}")
pops[[1]]
head(pops)
pops["_id"]
pops["state"]
pops["state",]
print(dim(pops))
pops[[1]][[1]]
pops[[1]][[2]]
pops[[2]][[1]]
head(pops)
pops[[1,1]]
pops[[2,1]]
pops[[1,"state"]]
pops[[,"state"]]
pops[["state"]]
pops[[,"state"]]
typeof(pops)
typeof(pops[1])
pops[1][2]
pops[1,2
]
pops[2,2]
head(pops)
typeof(pops[1])
pops[1]
pops[state]
pops["state"]
pops[["state"]
]
pops[["state"]]
v$state
pops$state
pops[[,"state"]]
print(dim(pops))
head(pops)
pops["state"]
pops["house_seats"]
pops["charle"]
pops
pops$state
pops[[1]]
print(dim(pops[[1]]))
pops[[1,1]])
length(pops)
popone <- mongo.find.one(mongo, coll, "{\"population\":{\"$gte\":1000000}}")
popone
popone["state"]
popone[1,"state"]
typeof(popone)
head(pops)
airportsdf <- data.frame(airports, stringsAsFactors = FALSE)
flightsdf <- data.frame(flights, stringsAsFactors = FALSE)
library(nycflights13)
library(dplyr)
library(RPostgreSQL)
airportsdf <- data.frame(airports, stringsAsFactors = FALSE)
flightsdf <- data.frame(flights, stringsAsFactors = FALSE)
unique(airportsdf$origin)
unique(flightsdf$origin)
library(nycflights13)
library(dplyr)
library(RPostgreSQL)
airportsdf <- data.frame(airports, stringsAsFactors = FALSE)
flightsdf <- data.frame(flights, stringsAsFactors = FALSE)
workingdirectory <- "C:/Users/Charley/Downloads/Courses/CUNY/SPS/Git/IS 607 Data Acquisition and Management/Week 13/Assignment"
setwd(workingdirectory)
con <- dbConnect(RPostgreSQL::PostgreSQL(), user="postgres", password="sinaiA9xpsql",
dbname="flights")
con
# I found a double here, I'll remove it for the purposes of this assignment.
# Lets keep Beaufort
airportsdf <- airportsdf %>%
filter(name != "BFT County Airport")
# I also found a fewairports, BQN, in flights that's not in
# airports. I'll remove this as well for the assignment
removelist <- unique(flightsdf$dest)[!(unique(flightsdf$dest) %in% unique(airportsdf$faa))]
flightsdf <- flightsdf %>%
filter(!(dest %in% removelist))
dbWriteTable(con, "airports", airportsdf, row.names=FALSE)
dbWriteTable(con, "flights", flightsdf, row.names=TRUE)
length(airportsdf$faa)
length(flightsdf$flight)
length(unique(airportsdf$faa)
)
length(unique(flightsdf$dest))
library(nycflights13)
library(dplyr)
library(RPostgreSQL)
##### Question 1 Prep #####
airportsdf <- data.frame(airports, stringsAsFactors = FALSE)
flightsdf <- data.frame(flights, stringsAsFactors = FALSE)
workingdirectory <- "C:/Users/Charley/Downloads/Courses/CUNY/SPS/Git/IS 607 Data Acquisition and Management/Week 13/Assignment"
setwd(workingdirectory)
con <- dbConnect(RPostgreSQL::PostgreSQL(), user="postgres", password="sinaiA9xpsql",
dbname="flights")
con
length(unique(flightsdf$dest))
length(flightsdf$flight)
# I found a double here, I'll remove it for the purposes of this assignment.
# Lets keep Beaufort
airportsdf <- airportsdf %>%
filter(name != "BFT County Airport")
# I also found a fewairports, BQN, in flights that's not in
# airports. I'll remove this as well for the assignment
removelist <- unique(flightsdf$dest)[!(unique(flightsdf$dest) %in% unique(airportsdf$faa))]
flightsdf <- flightsdf %>%
filter(!(dest %in% removelist))
dbWriteTable(con, "airports", airportsdf, row.names=FALSE)
dbWriteTable(con, "flights", flightsdf, row.names=TRUE)
library(nycflights13)
library(dplyr)
library(RPostgreSQL)
##### Question 1 Prep #####
airportsdf <- data.frame(airports, stringsAsFactors = FALSE)
flightsdf <- data.frame(flights, stringsAsFactors = FALSE)
workingdirectory <- "C:/Users/Charley/Downloads/Courses/CUNY/SPS/Git/IS 607 Data Acquisition and Management/Week 13/Assignment"
setwd(workingdirectory)
con <- dbConnect(RPostgreSQL::PostgreSQL(), user="postgres", password="sinaiA9xpsql",
dbname="flights")
con
length(unique(flightsdf$dest))
length(flightsdf$flight)
# I found a double here, I'll remove it for the purposes of this assignment.
# Lets keep Beaufort
airportsdf <- airportsdf %>%
filter(name != "BFT County Airport")
# I also found a fewairports, BQN, in flights that's not in
# airports. I'll remove this as well for the assignment
removelist <- unique(flightsdf$dest)[!(unique(flightsdf$dest) %in% unique(airportsdf$faa))]
flightsdf <- flightsdf %>%
filter(!(dest %in% removelist))
dbWriteTable(con, "airports", airportsdf, row.names=FALSE)
dbWriteTable(con, "flights", flightsdf, row.names=TRUE)
airlinesdf <- data.frame(airlines, stringsAsFactors=FALSE)
?str
airlinesdf <- data.frame(carrier = str(airlines$carrier),
name = str(airlines$name))
airlines$carrier
type(airlines$carrier)
typeof(airlines$carrier)
airlines$carrier[1]
str(airlines$carrier[1])
as.character(airlines$carrier[1])
airlinesdf <- data.frame(carrier = as.character(airlines$carrier),
name = as.character(airlines$name))
as.character(airlines)
airlinesdf <- data.frame(carrier = as.character(airlines$carrier),
name = as.character(airlines$name),
stringsAsFactor = FALSE)
airlinesdf <- data.frame(carrier = as.character(airlines$carrier),
name = as.character(airlines$name),
stringsAsFactors = FALSE)
dbWriteTable(con, "airlines", airlinesdf, row.names=FALSE)
dbWriteTable(con, "flights", flightsdf, row.names=TRUE)
dbWriteTable(con, "airlines", airlinesdf, row.names=FALSE)
dbWriteTable(con, "flights", flightsdf, row.names=TRUE)
View(flightsdf)
planes <- group_by(flights, tailnum)
delay <- summarise(planes,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
delay <- filter(delay, count > 20, dist < 2000)
planes <- group_by(flights, tailnum)
delay <- summarise(planes,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE))
head(delay)
airport.delays <- group_by(flights, origin)
airport.delay.sum <- summarise(airport.delays,
count = n(),
sumdelay = sum(dep_delay + arr_delay))
View(airport.delay.sum)
airport.delay.sum <- summarise(airport.delays,
count = n(),
sumdelay = SUM(dep_delay + arr_delay))
airport.delay.sum <- summarise(airport.delays,
count = n(),
sumdelay = sum(dep_delay) + sum(arr_delay))
airport.delay.sum <- summarise(airport.delays,
count = n(),
sumdelay = sum(dep_delay))
airport.delay.sum <- summarise(airport.delays,
count = n(),
sumdelay = sum(arr_delay))
unique(airport.delays$dep_delay)
is.na(unique(airport.delays$dep_delay))
airport.delays <- flights %>%
group_by(origin) %>%
filter(is.na(airport.delays$dep_delay) | is.na(airport.delays$arr_delay))
is.na(airport.delays$dep_delay) | is.na(airport.delays$arr_delay)
length(is.na(airport.delays$dep_delay) | is.na(airport.delays$arr_delay))
length(is.na(airport.delays$dep_delay))
airport.delays <- flights %>%
filter(is.na(airport.delays$dep_delay) | is.na(airport.delays$arr_delay))
airport.delays <- flights %>%
filter(is.na(airport.delays$dep_delay) | is.na(airport.delays$arr_delay)) %>%
group_by(origin)
airport.delays <- flights %>%
filter(is.na(airport.delays$dep_delay) | is.na(airport.delays$arr_delay)) #%>%
airport.delays <- flights %>%
filter(is.na(airport.delays$dep_delay) | is.na(airport.delays$arr_delay)) #%>%
airport.delays <- flights %>%
filter(is.na(airport.delays$dep_delay) | is.na(airport.delays$arr_delay))
airport.delays <- flights %>%
filter(is.na(flights$dep_delay) | is.na(flights$arr_delay))
group_by(origin)
airport.delays <- flights %>%
group_by(origin) %>%
filter(is.na(flights$dep_delay) | is.na(flights$arr_delay))
airport.delays <- flights %>%
#group_by(origin) %>%
filter(is.na(flights$dep_delay) | is.na(flights$arr_delay))
airport.delays <- flights %>%
#group_by(origin) %>%
filter(is.na(flights$dep_delay) | is.na(flights$arr_delay))
airport.delays <- flights %>%
filter(is.na(flights$dep_delay) | is.na(flights$arr_delay)) %>%
group_by(origin)
airport.delays <- flights %>%
filter(is.na(flights$dep_delay) | is.na(flights$arr_delay)) %>%
group_by(origin)
airport.delays <- flights %>%
filter(is.na(flights$dep_delay) | is.na(flights$arr_delay)) %>%
group_by(origin)
airport.delay.sum <- summarise(airport.delays,
count = n(),
sumdelay = sum(arr_delay))
airport.delays <- flights %>%
filter(is.na(flights$dep_delay) | is.na(flights$arr_delay)) %>%
group_by(origin)
is.na(airport.delays$dep_delay)
airport.delays <- flights %>%
filter(!(is.na(flights$dep_delay) | is.na(flights$arr_delay))) %>%
group_by(origin)
is.na(airport.delays$dep_delay)
airport.delay.sum <- summarise(airport.delays,
count = n(),
sumdelay = sum(arr_delay))
library(plyr)
airport.delays <- flights[!(is.na(flights$dep_delay) | is.na(flights$arr_delay))]
airport.delays <- flights[!(is.na(flights$dep_delay) | is.na(flights$arr_delay)),]
head(baseball)
airport.delay.sum <- ddply(airport.delays, .variables = "origin", .fun = sum)
airport.delay.sum <- ddply(airport.delays, .variables = "origin", .fun = SUM)
length(flights)
dim(flights)
dim(flights[flights$dep_delay>0 | flights$arr_delay>0,])
n?
)
?n
sumcount <- function(data){
c(count = with(data, count = dim(data[data$dep_delay>0 | data$arr_delay>0,])[1]))
}
sum(flights$dep_delay)
sum(flights$dep_delay[!is.na(flights$deb_delay)])
sum(flights$dep_delay[!(is.na(flights$deb_delay))])
flights$dep_delay
sum(flights$dep_delay[!(is.na(flights$dep_delay))])
sumcount <- function(data){
c(count = with(data, count = dim(data[data$dep_delay>0 | data$arr_delay>0,])[1]),
sum = with(data, sum = sum(data$dep_delay) + sum(data$arr_delay)))
}
airport.delay.sum <- ddply(airport.delays, .variables = "origin", .fun = sumcount())
airport.delay.sum <- ddply(airport.delays, .variables = "origin", .fun = sumcount)
