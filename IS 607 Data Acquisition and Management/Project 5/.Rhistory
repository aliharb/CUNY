?rrnorm
?rnorm
rnorm(10, mean = 0, sd = 1)
mean(2,3,4)
?mean
mean(c(2,3,4)
)
vec <- rnorm(10000, mean = 0, sd = 1)
length(vec)
mean(vec)
sd(vec)
hist(vec)
system.time(
rnorm(10, mean = 0, sd = 1)
vec <- rnorm(10000, mean = 0, sd = 1)
mean(vec)
sd(vec)
)
system.time(
rnorm(10, mean = 0, sd = 1);
vec <- rnorm(10000, mean = 0, sd = 1);
mean(vec);
sd(vec)
)
system.time(rnorm(10, mean = 0, sd = 1))
system.time(rnorm(1000000, mean = 0, sd = 1))
calculateRandomMean <- function(n, mean, sd){
vec <- rnorm(n, mean = mean, sd = sd)
return(mean(vec))
}
system.time(calculateRandomMean(1000000, 0, 1))
system.time(calculateRandomMean(1000000, 0, 1), samples = 100)
?system.time
system.time(calculateRandomMean(1000000, 0, 1))
system.time(calculateRandomMean(10000000, 0, 1))
system.time(calculateRandomMean(100000000, 0, 1))
install.packages("Rcpp")
library(Rcpp)
?cppFunction
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add
add(2, 3, 4)
cppFunction('double cppCalcRandomMean(int n, double mean, double sd){
std::default_random_engine generator;
std::normal_distribution<double> distribtion(mean,sd);
double vec[n]={}
for(int i=0; i<n; i++){
vec[i] = distribution(generator);
}
double sum = 0;
for(int j=0; j<n; j++){
sum += vec[j]
}
return sum/n;
}')
cppFunction('double cppCalcRandomMean(int n, double mean, double sd){
std::default_random_engine generator;
std::normal_distribution<double> distribtion(mean,sd);
double vec[n]={};
for(int i=0; i<n; i++){
vec[i] = distribution(generator);
}
double sum = 0;
for(int j=0; j<n; j++){
sum += vec[j];
}
return sum/n;
}')
cppFunction('double cppCalcRandomMean(int n, double mean, double sd){
std::default_random_engine generator;
std::normal_distribution<double> distribtion(mean,sd);
double vec[n]={};
for(int i=0; i<n; i++){
vec[i] = distribution(generator);
}
double sum = 0;
for(int j=0; j<n; j++){
sum += vec[j];
}
return sum/n;
}')
cppFunction('double cppCalcTestMean(int n){
double vec[n] = {};
for(int i=0; i<n; i++){
vec[i] = i
}
double sum = 0;
for(int j=0; j<n; j++){
sum += vec[j];
}
return sum/n;
}')
cppFunction('double cppCalcTestMean(int n){
vectorio[i] = {};
return 0;
}')
cppFunction('double cppCalcTestMean(int n){
vectorio[n] = {};
return 0;
}')
cppFunction('double cppCalcTestMean(int n){
vectorio[n] = [];
return 0;
}')
cppFunction('double cppCalcTestMean(int n){
vectorio[n] = {};
return 0;
}')
cppFunction('double cppCalcTestMean(int n){
int vectorio[n] = {};
return 0;
}')
cppFunction('double cppCalcTestMean(int n){
double vectorio[n] = {};
for(int i=0; i<n; i++){
vectorio[i] = i;
}
return 12.4;
}')
cppFunction('double sumC(NumericVector x){
int n = x.size();
double total = 0;
for(int i=0; i<n; ++i){
total += x[i];
}
return total;
}')
vec <- rnorm(n, mean=0, sd=1)
system.time(mean(vec))
vec <- rnorm(100000000, mean=0, sd=1)
system.time(mean(vec))
cppFunction('double meanC(NumericVector x){
int n = x.size();
double total = 0;
for(int i=0; i<n; ++i){
total += x[i];
}
return total/n;
}')
system.time(meanC(vec))
library(Rcpp)
vec <- rnorm(100000000, mean=0, sd=1)
system.time(mean(vec))
cppFunction('double meanC(NumericVector x){
int n = x.size();
double total = 0;
for(int i=0; i<n; ++i){
total += x[i];
}
return total/n;
}')
system.time(meanC(vec))
install.packages("MASS")
library(MASS)
data()
head(rock)
head(state)
head(state.area)
head(occupationalStatus)
data <- occupationalStatus
rm(data)
data <- occupationalStatus
occupationalStatus
head(eagles)
hwead(topo)
head(topo)
head(freeny)
eurodist
data <- eurodist
head(eurodist)
eurodist
typeof(eurodist)
eurodist[1]
eurodist['Athens']
eurodist
dim(eurodist)
?dim
dim(c(c(1,2,3),c(4,5,6)))
nrows(durodist)
nrow(eurodist)
eurodist
cmdscale(eurodist)
?cmdscale
typeof(eurodist)
eurodist[1,1]
eurodist[14]
eurodist$Madrid
eurodist['Madrid']
eurodist
install.packages('stats')
library(stats)
eurodist
?stats
?cmdscale
?dist
hasil
library(reshape2)
install.packages("reshape2")
library(reshape2)
as.matrix(eurodist)
as.matrix(eurodist)[Athens, Athens]
as.matrix(eurodist)['Athens', 'Athens']
as.matrix(eurodist)['Athens', 'Stockholm']
eurodist['Athens', 'Stockholm']
as.matrix(eurodist)['Stockholm', 'Athens']
as.data.frame(eurodist)
as.matrix(eurodist)
colnames(as.matrix(eurodist))
rownames(as.matrix(eurodist))
df <- data.frame(Origin = [], Destination = [])
df <- data.frame(Origin = character(0), Destination = character(0))
city = "Athens"
df1 <- data.frame(Origin = "Athens", Destination = colnames(as.matrix(eurodist)))
View(df1)
df <- data.frame(Origin = character(0), Destination = character(0), Distance = numeric(0))
for(city in colnames(as.matrix(eurodist))){
df <- cbind(df, data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist)),
Distance = as.matrix(eurodist)[city, colnames(as.matrix(eurodist))]))
}
city = "Athens"
df <- cbind(df, data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist)),
Distance = as.matrix(eurodist)[city, colnames(as.matrix(eurodist))]))
df1 = data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist))
)
View(df1)
as.matrix(eurodist[city, colnames(as.matrix(eurodist))])
as.matrix(eurodist)[city, colnames(as.matrix(eurodist))]
df1 = data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist)),
Distance = as.matrix(eurodist)[city, colnames(as.matrix(eurodist))])
View(df)
View(df1)
as.matrix(eurodist)[city, colnames(as.matrix(eurodist))]
as.numeric(as.matrix(eurodist)[city, colnames(as.matrix(eurodist))])
df1 = data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist)),
Distance = as.numeric(as.matrix(eurodist)[city, colnames(as.matrix(eurodist))]))
View(df1)
df <- data.frame(Origin = character(0), Destination = character(0), Distance = numeric(0))
for(city in colnames(as.matrix(eurodist))){
df <- cbind(df, data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist)),
Distance = as.numeric(as.matrix(eurodist)[city, colnames(as.matrix(eurodist))])))
}
df <- data.frame(Origin = character(0), Destination = character(0), Distance = numeric(0))
cbind(df, data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist)),
Distance = as.numeric(as.matrix(eurodist)[city, colnames(as.matrix(eurodist))])))
data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist)),
Distance = as.numeric(as.matrix(eurodist)[city, colnames(as.matrix(eurodist))]))
df1 <- data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist)),
Distance = as.numeric(as.matrix(eurodist)[city, colnames(as.matrix(eurodist))]))
cbind(df, df1)
rbind(df, df1)
df <- data.frame(Origin = character(0), Destination = character(0), Distance = numeric(0))
for(city in colnames(as.matrix(eurodist))){
df <- rbind(df, data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist)),
Distance = as.numeric(as.matrix(eurodist)[city, colnames(as.matrix(eurodist))])))
}
View(df)
colnames(as.matrix(eurodist))
install.packages('rvest')
library(rvest)
theURL <- "http://en.wikipedia.org/wiki/Largest_cities_of_the_European_Union_by_population_within_city_limits"
theSource <- html(theURL)
citylist <- theSource %>%
html_nodes(".jquery-tablesorter td:nth-child(2) a") %>%
html_text()
citylist <- theSource %>%
html_nodes("td > a:nth-child(1) , .jquery-tablesorter b a") %>%
html_text()
html_nodes("td:nth-child(2)") %>%
html_text()
citylist <- theSource %>%
html_nodes("td:nth-child(2)") %>%
html_text()
citylist <- theSource %>%
html_nodes("td > a:nth-child(1) , .jquery-tablesorter b a") %>%
html_text()
citylist
colnames(as.matrix(eurodist))
library(MASS)
library(reshape2)
library(stats)
library(rvest)
df <- data.frame(Origin = character(0),
Destination = character(0),
Distance = numeric(0))
for(city in colnames(as.matrix(eurodist))){
df <- rbind(df, data.frame(Origin = city,
Destination = colnames(as.matrix(eurodist)),
Distance = as.numeric(as.matrix(eurodist)[city, colnames(as.matrix(eurodist))])))
}
library(dplyr)
install.packages('dplyr')
setwd("E:/CUNY 112614/CUNY/SPS/Git/IS 607 Data Acquisition and Management/Project 5")
dfpop <- read.csv("europop.csv", headers=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?read.csv
dfpop <- read.csv("europop.csv", header=TRUE)
View(dfpop)
dfpop <- read.csv("europop.csv", header=TRUE)
View(dfpop)
write.csv(df, "eurodistances.csv")
?write.csv
write.csv(df, "eurodistances.csv", row.names = FALSE)
library(dplyr)
df <- df %>%
filter(Distance != 0)
write.csv(df, "eurodistances.csv", row.names = FALSE)
citylist <- colnames(as.matrix(eurodist))
df <- data.frame(Origin = character(0),
Destination = character(0),
Distance = numeric(0))
for(city in colnames(as.matrix(eurodist))){
df <- rbind(df, data.frame(Origin = city,
Destination = citylist,
Distance = as.numeric(as.matrix(eurodist)[city, citylist])))
citylist <- citylist[citylist!=city]
}
df <- df %>%
filter(Distance != 0)
write.csv(df, "eurodistances.csv", row.names = FALSE)
