minus3 <- function(str){
}
return(substr(str, 1, nchar(str)-4))
colnames(wvaluetable) <- c("Island", "Location", "Area", "Population")
minus3 <- function(str){
return(substr(str, 1, nchar(str)-4))
}
wvaluetable$Area[minus1(wvaluetable$Area) == "]"]
minus3(wvaluetable$Area[minus1(wvaluetable$Area) == "]"])
wvaluetable$Area[minus1(wvaluetable$Area) == "]"] <-
minus3(wvaluetable$Area[minus1(wvaluetable$Area) == "]"])
wvaluetable$Area
theURL <- "http://en.wikipedia.org/wiki/List_of_freshwater_islands_in_Scotland"
wvalues.6 <- readHTMLTable(theURL)
wvaluetable <- wvalues.6[[1]]
#Now to format the tables:
minus1 <- function(str){
return(substr(str, nchar(str), nchar(str)))
}
minus3 <- function(str){
return(substr(str, 1, nchar(str)-4))
}
colnames(wvaluetable) <- c("Island", "Location", "Area", "Population")
wvaluetable$Area <- as.character(wvaluetable$Area)
wvaluetable$Area[minus1(wvaluetable$Area) == "]"] <-
minus3(wvaluetable$Area[minus1(wvaluetable$Area) == "]"])
wvaluetable$Area <- as.numeric(wvaluetable$Area)
wvaluetable$Population
wvaluetable$Population <- as.numeric(wvaluetable$Population)
View(wvaluetable)
c <- 0
c <- as.numeric(c)
theURL <- "http://en.wikipedia.org/wiki/List_of_freshwater_islands_in_Scotland"
wvalues.6 <- readHTMLTable(theURL)
wvaluetable <- wvalues.6[[1]]
#Now to format the tables:
minus1 <- function(str){
return(substr(str, nchar(str), nchar(str)))
}
minus3 <- function(str){
return(substr(str, 1, nchar(str)-4))
}
colnames(wvaluetable) <- c("Island", "Location", "Area", "Population")
wvaluetable$Area <- as.character(wvaluetable$Area)
wvaluetable$Area[minus1(wvaluetable$Area) == "]"] <-
minus3(wvaluetable$Area[minus1(wvaluetable$Area) == "]"])
wvaluetable$Area <- as.numeric(wvaluetable$Area)
View(wvaluetable)
vec <- wvaluetable$Population
vec
as.numeric(vec)
as.numeric(as.character(vec))
wvaluetable$Population <- as.numeric(as.character(wvaluetable$Population))
View(wvaluetable)
library(dplyr)
require(XML)
theURL <- "http://en.wikipedia.org/wiki/List_of_freshwater_islands_in_Scotland"
wvalues.6 <- readHTMLTable(theURL)
wvaluetable <- wvalues.6[[1]]
#Now to format the tables:
minus1 <- function(str){
return(substr(str, nchar(str), nchar(str)))
}
minus3 <- function(str){
return(substr(str, 1, nchar(str)-4))
}
colnames(wvaluetable) <- c("Island", "Location", "Area", "Population")
wvaluetable$Area <- as.character(wvaluetable$Area)
wvaluetable$Area[minus1(wvaluetable$Area) == "]"] <-
minus3(wvaluetable$Area[minus1(wvaluetable$Area) == "]"])
wvaluetable$Area <- as.numeric(wvaluetable$Area)
wvaluetable$Population <- as.numeric(as.character(wvaluetable$Population))
View(wvaluetable)
install.packages("devtools")
install_github("hadley/rvest")
library(devtools)
install_github("hadley/rvest")
library(rvest)
theURL <-"http://en.wikipedia.org/wiki/List_of_cocktails"
theSource <- html(theURL)
theSource
html_text(theURL, h2)
theURL <-"http://en.wikipedia.org/wiki/Largest_organisms"
theSource <- html(theURL)
library(rvest)
lego_movie <- html("http://www.imdb.com/title/tt1490017/")
rating <- lego_movie %>%
html_nodes("strong span") %>%
html_text() %>%
as.numeric()
theURL <-"http://en.wikipedia.org/wiki/Largest_organisms"
theSource <- html(theURL)
cocktailList <- theSource %>%
html_notes("li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("li a") %>%
html_text()
theURL <-"http://en.wikipedia.org/wiki/List_of_cocktails"
theSource <- html(theURL)
cocktailList <- theSource %>%
html_nodes("li a") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe ul li a") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("#Absinthe ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .itemprop ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .itemprop li") %>%
html_text()
html_nodes("#Absinthe .itemprop") %>%
cocktailList <- theSource %>%
html_nodes("#Absinthe .itemprop") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("#Absinthe .itemprop a") %>%
html_text()
theSource <- html(theURL)
cocktailList <- theSource %>%
html_nodes("a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("h2 span") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("#mw-headline .itemprop h2 span") %>%
html_text()
cast <- lego_movie %>%
html_nodes("#titleCast .itemprop span") %>%
html_text()
cast
cocktailList <- theSource %>%
html_nodes("ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .id div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .class div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_text()
html_nodes("#Absinthe .class li a") %>%
cocktailList <- theSource %>%
html_nodes("#Absinthe .class") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .class span") %>%
html_text()
vignette("selectorgadget")
cocktailList <- theSource %>%
html_text()
html_nodes("#Absinthe .div-col ul li a") %>%
cocktailList <- theSource %>%
html_nodes("#Absinthe ul li a") %>%
html_text()
html_nodes("div ul li a") %>%
cocktailList <- theSource %>%
html_nodes("div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("h2 div div ul li a") %>%
html_text()
html_nodes("div div ul li a") %>%
cocktailList <- theSource %>%
html_nodes("div div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("div div ul li a") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("#Absinthe") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("#corpse #reviver") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#corpse") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".Absinthe div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .div-col div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".div-col div ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("#Absinthe .id") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".(div-col columns column-count column-count-2)") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".div-col columns column-count column-count-2") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".div-col") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes(".div-col ul li a") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("#Absinthe .div-col ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".div-col ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".div-col .columns ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".columns ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".column-count-2 ul li a") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes(".Absinthe ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".column-count-2 .boilerplate ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".boilerplate ul li a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes(".column-count-2 ul li a") %>%
html_text()
cocktailList
cocktailList <- cocktailList[cocktailList != "IBA"]
cocktailList
cocktailList <- theSource %>%
html_notes("dl~ ul a , .tright+ ul a , h4+ ul a , .column-count-3 li > a , .seealso+ ul a , .column-count-2 li > a") %>%
html_text()
cocktailList <- theSource %>%
html_nodes("dl~ ul a , .tright+ ul a , h4+ ul a , .column-count-3 li > a , .seealso+ ul a , .column-count-2 li > a") %>%
html_text()
cocktailList
cocktailList <- cocktailList[cocktailList != "IBA"]
vignette("selectorgadget")
?selectorgadget
cocktailList <- theSource %>%
html_nodes("p+ ul b , dd b , .thumb+ ul b , h3+ ul b , .seealso+ ul a b , h2+ ul a:nth-child(1) b") %>%
html_text()
cocktailList
cocktailList <- theSource %>%
html_nodes("p+ ul b , dd b , .thumb+ ul b , h3+ ul b , .seealso+ ul a b , h2+ ul a:nth-child(1) b") %>%
html_text()
theURL <-"http://en.wikipedia.org/wiki/List_of_paradoxes"
theSource <- html(theURL)
cocktailList <- theSource %>%
html_nodes("p+ ul b , dd b , .thumb+ ul b , h3+ ul b , .seealso+ ul a b , h2+ ul a:nth-child(1) b") %>%
html_text()
cocktailList
library(rvest)
theURL <-"http://en.wikipedia.org/wiki/List_of_paradoxes"
theSource <- html(theURL)
paradoxList <- theSource %>%
html_nodes("p+ ul b , dd b , .thumb+ ul b , h3+ ul b , .seealso+ ul a b , h2+ ul a:nth-child(1) b") %>%
html_text()
paradoxList
install.packages("rmongodb")
library(rmongodb)
?rmongodb
?mongo.create
mongo.create(db = "unitedstates")
mongo.find()
mdb <- mongo.create(db = "unitedstates")
mongo.find(mdb)
mongo.find(mdb, "geos")
mongo.find(mdb, "geos", fields="state")
?mongo.find
mongo.find(mdb, "geos", query={state: "Kansas"})
mongo.find(mdb, "geos", query={"state": "Kansas"})
cursor <- mongo.find(mongo, "geos")
mongo <- mongo.create(db = "unitedstates")
library(rmongodb)
mongo <- mongo.create(db = "unitedstates")
cursor <- mongo.find(mongo, "geos")
while(mongo.cursor.next(cursor)){
print(mongo.cursor.value(cursor))
}
buf <- mongo.bson.buffer.create()
query <- mongo.bson.from.buffer(buf)
cursor <- mongo.find(mongo, "geos", query)
while(mongo.cursor.next(cursor)){
print(mongo.cursor.value(cursor))
}
mongo.cursor.destroy(cursor)
mongo <- mongo.create(db = "unitedstates")
mongo.is.connected(mongo)
mongo.get.databases(mongo)
mongo.get.database.collections(mongo, "unitedstates")
library(rmongodb)
mongo <- mongo.create(db = "unitedstates")
mongo.get.databases(mongo)
mongo.get.database.collections(mongo, "unitedstates")
coll <- "unitedstates.geos"
mongo.count(mongo, coll)
mongo.find.one(mongo, coll)
mongo.find.one(mongo, coll)
mongo.find.one(mongo, coll, "{\"state\":\"Alabama\"}")
mongo.find.one(mongo, coll, "{\"state\":\"Colorado\"}")
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(bug, "state", "Colorado")
mongo.bson.buffer.append(buf, "state", "Colorado")
query <- mongo.bson.from.buffer(buf)
query
mongo.bson.from.JSON("{\"state\":\"Colorado\"}")
buf
mongo.bson.from.JSON("{\"state\":\"Colorado\"}")
query <- mongo.bson.from.buffer(buf)
query
mongo.bson.from.JSON("{\"state\":\"Colorado\"}")
library(jsonlite)
json <- "{\"population\":{\"$lte\":1000000}}"
cat(prettify(json))
prettify(json)
validate(json)
pops <- mongo.find.all(mongo, coll, json)
json <- "{\"population\":{\"$gte\":1000000}}"
cat(prettify(json))
validate(json)
pops <- mongo.find.all(mongo, coll, json)
print(dim(pops))
?dim
head(pops)
mongo.cursor.to.data.frame
pops[1]
pops[1,1]
type.of(pops)
typeof(pops)
pops[1]
pops[[1]]
pops[[1]][[1]]
pops[[1]][[1]][[1]]
pops[[1]]
typeof(pops[[1]])
pops
head(pops)
pops[[1]]
mongo.find.one(mongo, coll, "{\"state\":\"Colorado\"}")
mongo.find(mongo, coll, "{\"state\":\"Colorado\"}")
mongo.find.one(mongo, coll, "{\"state\":\"Colorado\"}")
mongo.bson.to.list
mongo.bson.to.list(mongo.find.one(mongo, coll, "{\"state\":\"Colorado\"}"))
coloradofind <- mongo.find.one(mongo, coll, "{\"state\":\"Colorado\"}")
mongo.bson.to.list(coloradofind)
pops <- mongo.find.all(mongo, coll, "{\"population\":{\"$gte\":1000000}}")
pops[[1]]
head(pops)
pops["_id"]
pops["state"]
pops["state",]
print(dim(pops))
pops[[1]][[1]]
pops[[1]][[2]]
pops[[2]][[1]]
head(pops)
pops[[1,1]]
pops[[2,1]]
pops[[1,"state"]]
pops[[,"state"]]
pops[["state"]]
pops[[,"state"]]
typeof(pops)
typeof(pops[1])
pops[1][2]
pops[1,2
]
pops[2,2]
head(pops)
typeof(pops[1])
pops[1]
pops[state]
pops["state"]
pops[["state"]
]
pops[["state"]]
v$state
pops$state
pops[[,"state"]]
print(dim(pops))
head(pops)
pops["state"]
pops["house_seats"]
pops["charle"]
pops
pops$state
pops[[1]]
print(dim(pops[[1]]))
pops[[1,1]])
length(pops)
popone <- mongo.find.one(mongo, coll, "{\"population\":{\"$gte\":1000000}}")
popone
popone["state"]
popone[1,"state"]
typeof(popone)
head(pops)
library(dplyr)
library(RPostgreSQL)
#########################################################
#
# Part 1: Uploading the data to R
#
#########################################################
workingDirectory <- paste("C:/Users/Charley/Downloads/Courses/CUNY/SPS",
"/Git/IS 607 Data Acquisition and Management/Project 4", sep="")
setwd(workingDirectory)
grad.students <- read.csv(paste("https://raw.githubusercontent.com/",
"fivethirtyeight/data/master/college-majors/all-ages.csv", sep=""),
stringsAsFactors=FALSE)
recent.grads <- read.csv(paste("https://raw.githubusercontent.com/",
"fivethirtyeight/data/master/college-majors/recent-grads.csv", sep=""),
stringsAsFactors=FALSE)
all.ages <- read.csv(paste("https://raw.githubusercontent.com/",
"fivethirtyeight/data/master/college-majors/all-ages.csv", sep=""),
stringsAsFactors=FALSE)
majors.list <- read.csv(paste("https://raw.githubusercontent.com/",
"fivethirtyeight/data/master/college-majors/majors-list.csv", sep=""),
stringsAsFactors=FALSE)
# Make sure the major codes are unique
length(unique(grad.students$Major_code))
length(unique(all.ages$Major_code))
length(unique(recent.grads$Major_code))
length(unique(majors.list$FOD1P))
# Checking why the lengh of majors.list is one item longer.
filter(majors.list, !FOD1P %in% recent.grads$Major_code)
filter(majors.list, !FOD1P %in% all.ages$Major_code)
filter(majors.list, !FOD1P %in% grad.students$Major_code)
# It should be safe to remove NA majors
majors.list <- filter(majors.list, Major != "N/A (less than bachelor\'s degree)")
# Now to make FOD1P an int, instead of CHR
majors.list$FOD1P <- as.integer(majors.list$FOD1P)
# Fixing column titles.
# majors.list$FOD1P will be changed to $Major_code
# recent.grads$Full_time_year_round will be changed to
# $Employed_full_time_year_round
colnames(majors.list) <- c("Major_code", "Major", "Major_Category")
colnames(recent.grads)[colnames(recent.grads) == "Full_time_year_round"] <-
"Employed_full_time_year_round"
#########################################################
#
# Part 1: Preparing data for PostgreSQL Upload
# See Appendix B for data source schema and PSQL Schema
#
#########################################################
# Create a table "student type." Then I'll combine grad.students
# and all.ages into one table.
# The primary key for all.ages.limitedvar will be the
# combination of student.type and Major
student.type <- data.frame(id=c(1,2), name=c("Undergrad", "Grad"))
all.ages <- select(all.ages, -(c(Major, Major_category)))
grad.students <- select(grad.students, -(c(Major, Major_category)))
recent.grads <- select(recent.grads, -(c(Major, Major_category)))
# Combine grad.students and all.ages into one table, with
# another variable marking grad or recent
grad.students$Student_type <- 2
all.ages$Student_type <- 1
all.ages.limitedvar <- rbind(grad.students, all.ages)
rm(all.ages, grad.students)
con <- dbConnect(RPostgreSQL::PostgreSQL(), user="postgres", password="sinaiA9xpsql",
dbname="MajorIncome")
con
dbWriteTable(con, "majorlist", majors.list, row.names=FALSE)
dbWriteTable(con, "allageslimvar", all.ages.limitedvar, row.names=FALSE)
dbWriteTable(con, "recentgrads", recent.grads, row.names=FALSE)
dbWriteTable(con, "studenttype", student.type, row.names=FALSE)
dbWriteTable(con, "majorlist", majors.list, row.names=FALSE)
dbWriteTable(con, "allageslimvar", all.ages.limitedvar, row.names=FALSE)
dbWriteTable(con, "recentgrads", recent.grads, row.names=FALSE)
dbWriteTable(con, "studenttype", student.type, row.names=FALSE)
