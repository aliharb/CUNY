names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <_ names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
data.frame(matrix(NA, nrow=0, ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))))
curs <- mongo.find(mongo, coll, statequery)
mongo.bson.to.list(mongo.cursor.value(curs))
mongo.cursor.next(cur)
mongo.cursor.next(curs)
mongo.bson.to.list(mongo.cursor.value(curs))
statedata <- data.frame(matrix(NA, nrow=0, ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))))
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
View(statedata)
mongo.count(mongo, coll, statequery)
for(i in 1:mongo.count(mongo, coll, statequery)-1){
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
}
for(i in 1:mongo.count(mongo, coll, statequery)-2){
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
}
mongo.bson.to.list(mongo.cursor.value(curs))
for(i in 1:(mongo.count(mongo, coll, statequery)-1)){
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
}
for(i in 1:49){
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
}
for(i in 1:20){
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
}
for(i in 1:3){
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
}
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
mongo.bson.to.list(mongo.cursor.value(curs))
names(mongo.bson.to.list(mongo.cursor.value(curs)))
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
names(mongo.bson.to.list(mongo.cursor.value(curs)))
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
names(mongo.bson.to.list(mongo.cursor.value(curs)))
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
names(mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
names(mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
names(mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
names(mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.bson.to.list(mongo.cursor.value(curs))
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
mongo.bson.to.list(mongo.cursor.value(curs))
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))))
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
View(statedata)
mongo.bson.to.list(mongo.cursor.value(curs))
View(statedata)
colnames(statedata)
names(mongo.bson.to.list(mongo.cursor.value(curs)))
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
mongo.bson.to.list(mongo.cursor.value(curs))
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))))
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
for(i in 1:3){
mongo.cursor.next(curs)
names(mongo.bson.to.list(mongo.cursor.value(curs))) <- colnames(statedata)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
}
mongo.bson.to.list(mongo.cursor.value(curs)
mongo.bson.to.list(mongo.cursor.value(curs))
mongo.cursor.next(curs)
mongo.bson.to.list(mongo.cursor.value(curs))
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))))
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
names(mongo.bson.to.list(mongo.cursor.value(curs))) <- colnames(statedata)
names(mongo.bson.to.list(mongo.cursor.value(curs)))
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))))
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
names(mongolist) <- colnames(statedata)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
mongolist
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata)[2:length(colnames(statedata))]
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))))
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
names(mongolist) <- colnames(statedata)
statedata <- rbind(statedata, mongolist)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
statedata <- rbind(statedata, mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
names(mongolist) <- colnames(statedata)
statedata <- rbind(statedata, mongolist)
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
mongolist <- mongo.cursor.value(curs)
mongolist
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
mongolist
statedata <- rbind(statedata, mongolist)
mongo.cursor.next(curs)
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
mongolist
statedata <- rbind(statedata, mongolist)
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedata <- rbind(statedata, mongolist)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
statedata <- rbin(statedata, statedataadd)
statedata <- rbind(statedata, statedataadd)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
statedata <- rbind(statedata, statedataadd)
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
mongolist
statedata <- rbind(statedata, mongolist)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
library(rmongodb)
library(jsonlite)
mongo <- mongo.create(db = "unitedstates")
coll <- "unitedstates.geos"
statequery <- "{ \"state\" : {\"$exists\" : \"true\"}}"
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedata <- rbind(statedata, mongolist)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
View(statedata)
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedata <- rbind(statedata, mongolist)
for(i in 1:49){
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
i <- i + 1
}
View(statedata)
rm(statedataadd)
?mongo.count
mongo.count(mongo, coll, statequerry)
mongo.count(mongo, coll, statequery)
library(rmongodb)
library(jsonlite)
mongo <- mongo.create(db = "unitedstates")
coll <- "unitedstates.geos"
statequery <- "{ \"state\" : {\"$exists\" : \"true\"}}"
###########################################################
# Get the first value to initialize the data frame
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedata <- rbind(statedata, mongolist)
for(i in 1:(mongo.count(mongo, coll, statequery)-1)){
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
i <- i + 1
}
View(statedata)
districtquery <- "{ \"federal district\" : {\"$exists\" : \"true\"}}"
mongo.count(mongo, coll, districtquery)
districtquery <- "{ \"federal_district\" : {\"$exists\" : \"true\"}}"
mongo.count(mongo, coll, districtquery)
terrquery <- "{ \"territory\" : {\"$exists\" : \"true\"}}"
mongo.count(mongo, coll, terrquery)
curs <- mongo.find(mongo, coll, districtquery)
names(mongo.bson.to.list(mongo.cursor.value(curs))))
mongo.cursor.next(curs)
names(mongo.bson.to.list(mongo.cursor.value(curs))))
names(mongo.bson.to.list(mongo.cursor.value(curs)))
curs <- mongo.find(mongo, coll, districtquery)
names(mongo.bson.to.list(mongo.cursor.value(curs)))
mongo.cursor.next(curs)
names(mongo.bson.to.list(mongo.cursor.value(curs)))
districtdata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(districtdata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(districtdata) <- c("id", colnames(districtdata)[2:length(colnames(districtdata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
districtdata <- rbind(districtdata, mongolist)
View(districtdata)
curs <- mongo.find(mongo, coll, territoryquery)
mongo.cursor.next(curs)
territorydata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(territorydata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(territorydata) <- c("id", colnames(territorydata)[2:length(colnames(territorydata))])
curs <- mongo.find(mongo, coll, terrquery)
mongo.cursor.next(curs)
terrquery <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(terrquery) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(terrquery) <- c("id", colnames(terrquery)[2:length(colnames(terrquery))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
territorydata <- rbind(territorydata, mongolist)
View(territorydata)
for(i in 1:(mongo.count(mongo, coll, terrquery)-1)){
mongo.cursor.next(curs)
territorydataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(territorydataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(territorydataadd) <- c("id", colnames(territorydata)[2:length(colnames(territorydata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
territorydataadd <- rbind(territorydataadd, mongolist)
territorydata <- rbind(territorydata, territorydataadd)
i <- i + 1
}
mongo.count(mongo, coll, terrquery)
terrquery <- "{ \"territory\" : {\"$exists\" : \"true\"}}"
curs <- mongo.find(mongo, coll, terrquery)
mongo.cursor.next(curs)
territorydata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(territorydata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(territorydata) <- c("id", colnames(territorydata)[2:length(colnames(territorydata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
territorydata <- rbind(territorydata, mongolist)
for(i in 1:(mongo.count(mongo, coll, terrquery)-1)){
mongo.cursor.next(curs)
territorydataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(territorydataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(territorydataadd) <- c("id", colnames(territorydata)[2:length(colnames(territorydata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
territorydataadd <- rbind(territorydataadd, mongolist)
territorydata <- rbind(territorydata, territorydataadd)
i <- i + 1
}
rm(territorydataadd)
rm(statedataadd)
library(rmongodb)
library(jsonlite)
mongo <- mongo.create(db = "unitedstates")
coll <- "unitedstates.geos"
statequery <- "{ \"state\" : {\"$exists\" : \"true\"}}"
districtquery <- "{ \"federal_district\" : {\"$exists\" : \"true\"}}"
terrquery <- "{ \"territory\" : {\"$exists\" : \"true\"}}"
###########################################################
# Get the first value to initialize the data frame
curs <- mongo.find(mongo, coll, statequery)
mongo.cursor.next(curs)
statedata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedata) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedata <- rbind(statedata, mongolist)
###########################################################
# Then loop through the rest
for(i in 1:(mongo.count(mongo, coll, statequery)-1)){
mongo.cursor.next(curs)
statedataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(statedataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(statedataadd) <- c("id", colnames(statedata)[2:length(colnames(statedata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
statedataadd <- rbind(statedataadd, mongolist)
statedata <- rbind(statedata, statedataadd)
i <- i + 1
}
rm(statedataadd)
###########################################################
# For district there's only one record
curs <- mongo.find(mongo, coll, districtquery)
mongo.cursor.next(curs)
districtdata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(districtdata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(districtdata) <- c("id", colnames(districtdata)[2:length(colnames(districtdata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
districtdata <- rbind(districtdata, mongolist)
###########################################################
# Initialize the territory query
curs <- mongo.find(mongo, coll, terrquery)
mongo.cursor.next(curs)
territorydata <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(territorydata) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(territorydata) <- c("id", colnames(territorydata)[2:length(colnames(territorydata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
territorydata <- rbind(territorydata, mongolist)
###########################################################
# And then loop through it
for(i in 1:(mongo.count(mongo, coll, terrquery)-1)){
mongo.cursor.next(curs)
territorydataadd <- data.frame(matrix(NA, nrow=0,
ncol=length(names(mongo.bson.to.list(mongo.cursor.value(curs))))),
stringsAsFactors = FALSE)
colnames(territorydataadd) <- names(mongo.bson.to.list(mongo.cursor.value(curs)))
colnames(territorydataadd) <- c("id", colnames(territorydata)[2:length(colnames(territorydata))])
mongolist <- mongo.bson.to.list(mongo.cursor.value(curs))
territorydataadd <- rbind(territorydataadd, mongolist)
territorydata <- rbind(territorydata, territorydataadd)
i <- i + 1
}
rm(territorydataadd)
View(districtdata)
